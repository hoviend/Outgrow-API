// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountCategoryDelete is the builder for deleting a MasterAccountCategory entity.
type MasterAccountCategoryDelete struct {
	config
	hooks    []Hook
	mutation *MasterAccountCategoryMutation
}

// Where appends a list predicates to the MasterAccountCategoryDelete builder.
func (macd *MasterAccountCategoryDelete) Where(ps ...predicate.MasterAccountCategory) *MasterAccountCategoryDelete {
	macd.mutation.Where(ps...)
	return macd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (macd *MasterAccountCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountCategoryMutation](ctx, macd.sqlExec, macd.mutation, macd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (macd *MasterAccountCategoryDelete) ExecX(ctx context.Context) int {
	n, err := macd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (macd *MasterAccountCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(masteraccountcategory.Table, sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt))
	if ps := macd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, macd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	macd.mutation.done = true
	return affected, err
}

// MasterAccountCategoryDeleteOne is the builder for deleting a single MasterAccountCategory entity.
type MasterAccountCategoryDeleteOne struct {
	macd *MasterAccountCategoryDelete
}

// Where appends a list predicates to the MasterAccountCategoryDelete builder.
func (macdo *MasterAccountCategoryDeleteOne) Where(ps ...predicate.MasterAccountCategory) *MasterAccountCategoryDeleteOne {
	macdo.macd.mutation.Where(ps...)
	return macdo
}

// Exec executes the deletion query.
func (macdo *MasterAccountCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := macdo.macd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{masteraccountcategory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (macdo *MasterAccountCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := macdo.Exec(ctx); err != nil {
		panic(err)
	}
}
