// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountCreate is the builder for creating a MasterAccount entity.
type MasterAccountCreate struct {
	config
	mutation *MasterAccountMutation
	hooks    []Hook
}

// SetCategoryID sets the "category_id" field.
func (mac *MasterAccountCreate) SetCategoryID(i int) *MasterAccountCreate {
	mac.mutation.SetCategoryID(i)
	return mac
}

// SetName sets the "name" field.
func (mac *MasterAccountCreate) SetName(s string) *MasterAccountCreate {
	mac.mutation.SetName(s)
	return mac
}

// SetCreatedAt sets the "created_at" field.
func (mac *MasterAccountCreate) SetCreatedAt(t time.Time) *MasterAccountCreate {
	mac.mutation.SetCreatedAt(t)
	return mac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mac *MasterAccountCreate) SetNillableCreatedAt(t *time.Time) *MasterAccountCreate {
	if t != nil {
		mac.SetCreatedAt(*t)
	}
	return mac
}

// SetAccCategoryID sets the "accCategory" edge to the MasterAccountCategory entity by ID.
func (mac *MasterAccountCreate) SetAccCategoryID(id int) *MasterAccountCreate {
	mac.mutation.SetAccCategoryID(id)
	return mac
}

// SetAccCategory sets the "accCategory" edge to the MasterAccountCategory entity.
func (mac *MasterAccountCreate) SetAccCategory(m *MasterAccountCategory) *MasterAccountCreate {
	return mac.SetAccCategoryID(m.ID)
}

// Mutation returns the MasterAccountMutation object of the builder.
func (mac *MasterAccountCreate) Mutation() *MasterAccountMutation {
	return mac.mutation
}

// Save creates the MasterAccount in the database.
func (mac *MasterAccountCreate) Save(ctx context.Context) (*MasterAccount, error) {
	mac.defaults()
	return withHooks[*MasterAccount, MasterAccountMutation](ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MasterAccountCreate) SaveX(ctx context.Context) *MasterAccount {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MasterAccountCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MasterAccountCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MasterAccountCreate) defaults() {
	if _, ok := mac.mutation.CreatedAt(); !ok {
		v := masteraccount.DefaultCreatedAt()
		mac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MasterAccountCreate) check() error {
	if _, ok := mac.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "MasterAccount.category_id"`)}
	}
	if v, ok := mac.mutation.CategoryID(); ok {
		if err := masteraccount.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.category_id": %w`, err)}
		}
	}
	if _, ok := mac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MasterAccount.name"`)}
	}
	if v, ok := mac.mutation.Name(); ok {
		if err := masteraccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.name": %w`, err)}
		}
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MasterAccount.created_at"`)}
	}
	if _, ok := mac.mutation.AccCategoryID(); !ok {
		return &ValidationError{Name: "accCategory", err: errors.New(`ent: missing required edge "MasterAccount.accCategory"`)}
	}
	return nil
}

func (mac *MasterAccountCreate) sqlSave(ctx context.Context) (*MasterAccount, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mac.mutation.id = &_node.ID
	mac.mutation.done = true
	return _node, nil
}

func (mac *MasterAccountCreate) createSpec() (*MasterAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &MasterAccount{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(masteraccount.Table, sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt))
	)
	if value, ok := mac.mutation.Name(); ok {
		_spec.SetField(masteraccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mac.mutation.CreatedAt(); ok {
		_spec.SetField(masteraccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mac.mutation.AccCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccount.AccCategoryTable,
			Columns: []string{masteraccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MasterAccountCreateBulk is the builder for creating many MasterAccount entities in bulk.
type MasterAccountCreateBulk struct {
	config
	builders []*MasterAccountCreate
}

// Save creates the MasterAccount entities in the database.
func (macb *MasterAccountCreateBulk) Save(ctx context.Context) ([]*MasterAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MasterAccount, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MasterAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MasterAccountCreateBulk) SaveX(ctx context.Context) []*MasterAccount {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MasterAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MasterAccountCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
