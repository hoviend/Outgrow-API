// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/event"
	"outgrow/ent/organization"
	"outgrow/ent/organizationeventtype"
	"outgrow/ent/predicate"
	"outgrow/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetOrganizationID sets the "organization_id" field.
func (eu *EventUpdate) SetOrganizationID(u uuid.UUID) *EventUpdate {
	eu.mutation.SetOrganizationID(u)
	return eu
}

// SetEventTypeID sets the "event_type_id" field.
func (eu *EventUpdate) SetEventTypeID(i int) *EventUpdate {
	eu.mutation.SetEventTypeID(i)
	return eu
}

// SetAmount sets the "amount" field.
func (eu *EventUpdate) SetAmount(f float64) *EventUpdate {
	eu.mutation.ResetAmount()
	eu.mutation.SetAmount(f)
	return eu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (eu *EventUpdate) SetNillableAmount(f *float64) *EventUpdate {
	if f != nil {
		eu.SetAmount(*f)
	}
	return eu
}

// AddAmount adds f to the "amount" field.
func (eu *EventUpdate) AddAmount(f float64) *EventUpdate {
	eu.mutation.AddAmount(f)
	return eu
}

// SetNotes sets the "notes" field.
func (eu *EventUpdate) SetNotes(s string) *EventUpdate {
	eu.mutation.SetNotes(s)
	return eu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (eu *EventUpdate) SetNillableNotes(s *string) *EventUpdate {
	if s != nil {
		eu.SetNotes(*s)
	}
	return eu
}

// ClearNotes clears the value of the "notes" field.
func (eu *EventUpdate) ClearNotes() *EventUpdate {
	eu.mutation.ClearNotes()
	return eu
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (eu *EventUpdate) AddTransactionIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddTransactionIDs(ids...)
	return eu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (eu *EventUpdate) AddTransactions(t ...*Transaction) *EventUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTransactionIDs(ids...)
}

// SetTypeID sets the "type" edge to the OrganizationEventType entity by ID.
func (eu *EventUpdate) SetTypeID(id int) *EventUpdate {
	eu.mutation.SetTypeID(id)
	return eu
}

// SetType sets the "type" edge to the OrganizationEventType entity.
func (eu *EventUpdate) SetType(o *OrganizationEventType) *EventUpdate {
	return eu.SetTypeID(o.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (eu *EventUpdate) SetOrganization(o *Organization) *EventUpdate {
	return eu.SetOrganizationID(o.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (eu *EventUpdate) ClearTransactions() *EventUpdate {
	eu.mutation.ClearTransactions()
	return eu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (eu *EventUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveTransactionIDs(ids...)
	return eu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (eu *EventUpdate) RemoveTransactions(t ...*Transaction) *EventUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTransactionIDs(ids...)
}

// ClearType clears the "type" edge to the OrganizationEventType entity.
func (eu *EventUpdate) ClearType() *EventUpdate {
	eu.mutation.ClearType()
	return eu
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (eu *EventUpdate) ClearOrganization() *EventUpdate {
	eu.mutation.ClearOrganization()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if _, ok := eu.mutation.TypeID(); eu.mutation.TypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.type"`)
	}
	if _, ok := eu.mutation.OrganizationID(); eu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.organization"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Amount(); ok {
		_spec.SetField(event.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedAmount(); ok {
		_spec.AddField(event.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.Notes(); ok {
		_spec.SetField(event.FieldNotes, field.TypeString, value)
	}
	if eu.mutation.NotesCleared() {
		_spec.ClearField(event.FieldNotes, field.TypeString)
	}
	if eu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !eu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TypeTable,
			Columns: []string{event.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TypeTable,
			Columns: []string{event.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: []string{event.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: []string{event.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetOrganizationID sets the "organization_id" field.
func (euo *EventUpdateOne) SetOrganizationID(u uuid.UUID) *EventUpdateOne {
	euo.mutation.SetOrganizationID(u)
	return euo
}

// SetEventTypeID sets the "event_type_id" field.
func (euo *EventUpdateOne) SetEventTypeID(i int) *EventUpdateOne {
	euo.mutation.SetEventTypeID(i)
	return euo
}

// SetAmount sets the "amount" field.
func (euo *EventUpdateOne) SetAmount(f float64) *EventUpdateOne {
	euo.mutation.ResetAmount()
	euo.mutation.SetAmount(f)
	return euo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAmount(f *float64) *EventUpdateOne {
	if f != nil {
		euo.SetAmount(*f)
	}
	return euo
}

// AddAmount adds f to the "amount" field.
func (euo *EventUpdateOne) AddAmount(f float64) *EventUpdateOne {
	euo.mutation.AddAmount(f)
	return euo
}

// SetNotes sets the "notes" field.
func (euo *EventUpdateOne) SetNotes(s string) *EventUpdateOne {
	euo.mutation.SetNotes(s)
	return euo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableNotes(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetNotes(*s)
	}
	return euo
}

// ClearNotes clears the value of the "notes" field.
func (euo *EventUpdateOne) ClearNotes() *EventUpdateOne {
	euo.mutation.ClearNotes()
	return euo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (euo *EventUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddTransactionIDs(ids...)
	return euo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (euo *EventUpdateOne) AddTransactions(t ...*Transaction) *EventUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTransactionIDs(ids...)
}

// SetTypeID sets the "type" edge to the OrganizationEventType entity by ID.
func (euo *EventUpdateOne) SetTypeID(id int) *EventUpdateOne {
	euo.mutation.SetTypeID(id)
	return euo
}

// SetType sets the "type" edge to the OrganizationEventType entity.
func (euo *EventUpdateOne) SetType(o *OrganizationEventType) *EventUpdateOne {
	return euo.SetTypeID(o.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (euo *EventUpdateOne) SetOrganization(o *Organization) *EventUpdateOne {
	return euo.SetOrganizationID(o.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (euo *EventUpdateOne) ClearTransactions() *EventUpdateOne {
	euo.mutation.ClearTransactions()
	return euo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (euo *EventUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveTransactionIDs(ids...)
	return euo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (euo *EventUpdateOne) RemoveTransactions(t ...*Transaction) *EventUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTransactionIDs(ids...)
}

// ClearType clears the "type" edge to the OrganizationEventType entity.
func (euo *EventUpdateOne) ClearType() *EventUpdateOne {
	euo.mutation.ClearType()
	return euo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (euo *EventUpdateOne) ClearOrganization() *EventUpdateOne {
	euo.mutation.ClearOrganization()
	return euo
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if _, ok := euo.mutation.TypeID(); euo.mutation.TypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.type"`)
	}
	if _, ok := euo.mutation.OrganizationID(); euo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.organization"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Amount(); ok {
		_spec.SetField(event.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedAmount(); ok {
		_spec.AddField(event.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.Notes(); ok {
		_spec.SetField(event.FieldNotes, field.TypeString, value)
	}
	if euo.mutation.NotesCleared() {
		_spec.ClearField(event.FieldNotes, field.TypeString)
	}
	if euo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !euo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransactionsTable,
			Columns: []string{event.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TypeTable,
			Columns: []string{event.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TypeTable,
			Columns: []string{event.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: []string{event.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: []string{event.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
