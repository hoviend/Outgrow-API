// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/masteraccounttype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountTypeDelete is the builder for deleting a MasterAccountType entity.
type MasterAccountTypeDelete struct {
	config
	hooks    []Hook
	mutation *MasterAccountTypeMutation
}

// Where appends a list predicates to the MasterAccountTypeDelete builder.
func (matd *MasterAccountTypeDelete) Where(ps ...predicate.MasterAccountType) *MasterAccountTypeDelete {
	matd.mutation.Where(ps...)
	return matd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (matd *MasterAccountTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountTypeMutation](ctx, matd.sqlExec, matd.mutation, matd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (matd *MasterAccountTypeDelete) ExecX(ctx context.Context) int {
	n, err := matd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (matd *MasterAccountTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(masteraccounttype.Table, sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt))
	if ps := matd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, matd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	matd.mutation.done = true
	return affected, err
}

// MasterAccountTypeDeleteOne is the builder for deleting a single MasterAccountType entity.
type MasterAccountTypeDeleteOne struct {
	matd *MasterAccountTypeDelete
}

// Where appends a list predicates to the MasterAccountTypeDelete builder.
func (matdo *MasterAccountTypeDeleteOne) Where(ps ...predicate.MasterAccountType) *MasterAccountTypeDeleteOne {
	matdo.matd.mutation.Where(ps...)
	return matdo
}

// Exec executes the deletion query.
func (matdo *MasterAccountTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := matdo.matd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{masteraccounttype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (matdo *MasterAccountTypeDeleteOne) ExecX(ctx context.Context) {
	if err := matdo.Exec(ctx); err != nil {
		panic(err)
	}
}
