// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"outgrow/ent/event"
	"outgrow/ent/organization"
	"outgrow/ent/organizationeventtype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrganizationEventTypeQuery is the builder for querying OrganizationEventType entities.
type OrganizationEventTypeQuery struct {
	config
	ctx              *QueryContext
	order            []OrderFunc
	inters           []Interceptor
	predicates       []predicate.OrganizationEventType
	withEvents       *EventQuery
	withOrganization *OrganizationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationEventTypeQuery builder.
func (oetq *OrganizationEventTypeQuery) Where(ps ...predicate.OrganizationEventType) *OrganizationEventTypeQuery {
	oetq.predicates = append(oetq.predicates, ps...)
	return oetq
}

// Limit the number of records to be returned by this query.
func (oetq *OrganizationEventTypeQuery) Limit(limit int) *OrganizationEventTypeQuery {
	oetq.ctx.Limit = &limit
	return oetq
}

// Offset to start from.
func (oetq *OrganizationEventTypeQuery) Offset(offset int) *OrganizationEventTypeQuery {
	oetq.ctx.Offset = &offset
	return oetq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oetq *OrganizationEventTypeQuery) Unique(unique bool) *OrganizationEventTypeQuery {
	oetq.ctx.Unique = &unique
	return oetq
}

// Order specifies how the records should be ordered.
func (oetq *OrganizationEventTypeQuery) Order(o ...OrderFunc) *OrganizationEventTypeQuery {
	oetq.order = append(oetq.order, o...)
	return oetq
}

// QueryEvents chains the current query on the "events" edge.
func (oetq *OrganizationEventTypeQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: oetq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oetq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oetq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationeventtype.Table, organizationeventtype.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationeventtype.EventsTable, organizationeventtype.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oetq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (oetq *OrganizationEventTypeQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: oetq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oetq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oetq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationeventtype.Table, organizationeventtype.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationeventtype.OrganizationTable, organizationeventtype.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(oetq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrganizationEventType entity from the query.
// Returns a *NotFoundError when no OrganizationEventType was found.
func (oetq *OrganizationEventTypeQuery) First(ctx context.Context) (*OrganizationEventType, error) {
	nodes, err := oetq.Limit(1).All(setContextOp(ctx, oetq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organizationeventtype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) FirstX(ctx context.Context) *OrganizationEventType {
	node, err := oetq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrganizationEventType ID from the query.
// Returns a *NotFoundError when no OrganizationEventType ID was found.
func (oetq *OrganizationEventTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oetq.Limit(1).IDs(setContextOp(ctx, oetq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organizationeventtype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := oetq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrganizationEventType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrganizationEventType entity is found.
// Returns a *NotFoundError when no OrganizationEventType entities are found.
func (oetq *OrganizationEventTypeQuery) Only(ctx context.Context) (*OrganizationEventType, error) {
	nodes, err := oetq.Limit(2).All(setContextOp(ctx, oetq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organizationeventtype.Label}
	default:
		return nil, &NotSingularError{organizationeventtype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) OnlyX(ctx context.Context) *OrganizationEventType {
	node, err := oetq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrganizationEventType ID in the query.
// Returns a *NotSingularError when more than one OrganizationEventType ID is found.
// Returns a *NotFoundError when no entities are found.
func (oetq *OrganizationEventTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oetq.Limit(2).IDs(setContextOp(ctx, oetq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organizationeventtype.Label}
	default:
		err = &NotSingularError{organizationeventtype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := oetq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrganizationEventTypes.
func (oetq *OrganizationEventTypeQuery) All(ctx context.Context) ([]*OrganizationEventType, error) {
	ctx = setContextOp(ctx, oetq.ctx, "All")
	if err := oetq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrganizationEventType, *OrganizationEventTypeQuery]()
	return withInterceptors[[]*OrganizationEventType](ctx, oetq, qr, oetq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) AllX(ctx context.Context) []*OrganizationEventType {
	nodes, err := oetq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrganizationEventType IDs.
func (oetq *OrganizationEventTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oetq.ctx.Unique == nil && oetq.path != nil {
		oetq.Unique(true)
	}
	ctx = setContextOp(ctx, oetq.ctx, "IDs")
	if err = oetq.Select(organizationeventtype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := oetq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oetq *OrganizationEventTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oetq.ctx, "Count")
	if err := oetq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oetq, querierCount[*OrganizationEventTypeQuery](), oetq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) CountX(ctx context.Context) int {
	count, err := oetq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oetq *OrganizationEventTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oetq.ctx, "Exist")
	switch _, err := oetq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oetq *OrganizationEventTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := oetq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationEventTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oetq *OrganizationEventTypeQuery) Clone() *OrganizationEventTypeQuery {
	if oetq == nil {
		return nil
	}
	return &OrganizationEventTypeQuery{
		config:           oetq.config,
		ctx:              oetq.ctx.Clone(),
		order:            append([]OrderFunc{}, oetq.order...),
		inters:           append([]Interceptor{}, oetq.inters...),
		predicates:       append([]predicate.OrganizationEventType{}, oetq.predicates...),
		withEvents:       oetq.withEvents.Clone(),
		withOrganization: oetq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  oetq.sql.Clone(),
		path: oetq.path,
	}
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (oetq *OrganizationEventTypeQuery) WithEvents(opts ...func(*EventQuery)) *OrganizationEventTypeQuery {
	query := (&EventClient{config: oetq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oetq.withEvents = query
	return oetq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (oetq *OrganizationEventTypeQuery) WithOrganization(opts ...func(*OrganizationQuery)) *OrganizationEventTypeQuery {
	query := (&OrganizationClient{config: oetq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oetq.withOrganization = query
	return oetq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrganizationID uuid.UUID `json:"organization_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrganizationEventType.Query().
//		GroupBy(organizationeventtype.FieldOrganizationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oetq *OrganizationEventTypeQuery) GroupBy(field string, fields ...string) *OrganizationEventTypeGroupBy {
	oetq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrganizationEventTypeGroupBy{build: oetq}
	grbuild.flds = &oetq.ctx.Fields
	grbuild.label = organizationeventtype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrganizationID uuid.UUID `json:"organization_id,omitempty"`
//	}
//
//	client.OrganizationEventType.Query().
//		Select(organizationeventtype.FieldOrganizationID).
//		Scan(ctx, &v)
func (oetq *OrganizationEventTypeQuery) Select(fields ...string) *OrganizationEventTypeSelect {
	oetq.ctx.Fields = append(oetq.ctx.Fields, fields...)
	sbuild := &OrganizationEventTypeSelect{OrganizationEventTypeQuery: oetq}
	sbuild.label = organizationeventtype.Label
	sbuild.flds, sbuild.scan = &oetq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrganizationEventTypeSelect configured with the given aggregations.
func (oetq *OrganizationEventTypeQuery) Aggregate(fns ...AggregateFunc) *OrganizationEventTypeSelect {
	return oetq.Select().Aggregate(fns...)
}

func (oetq *OrganizationEventTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oetq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oetq); err != nil {
				return err
			}
		}
	}
	for _, f := range oetq.ctx.Fields {
		if !organizationeventtype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oetq.path != nil {
		prev, err := oetq.path(ctx)
		if err != nil {
			return err
		}
		oetq.sql = prev
	}
	return nil
}

func (oetq *OrganizationEventTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrganizationEventType, error) {
	var (
		nodes       = []*OrganizationEventType{}
		_spec       = oetq.querySpec()
		loadedTypes = [2]bool{
			oetq.withEvents != nil,
			oetq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrganizationEventType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrganizationEventType{config: oetq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oetq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oetq.withEvents; query != nil {
		if err := oetq.loadEvents(ctx, query, nodes,
			func(n *OrganizationEventType) { n.Edges.Events = []*Event{} },
			func(n *OrganizationEventType, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := oetq.withOrganization; query != nil {
		if err := oetq.loadOrganization(ctx, query, nodes, nil,
			func(n *OrganizationEventType, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oetq *OrganizationEventTypeQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*OrganizationEventType, init func(*OrganizationEventType), assign func(*OrganizationEventType, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OrganizationEventType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(organizationeventtype.EventsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EventTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oetq *OrganizationEventTypeQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*OrganizationEventType, init func(*OrganizationEventType), assign func(*OrganizationEventType, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OrganizationEventType)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oetq *OrganizationEventTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oetq.querySpec()
	_spec.Node.Columns = oetq.ctx.Fields
	if len(oetq.ctx.Fields) > 0 {
		_spec.Unique = oetq.ctx.Unique != nil && *oetq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oetq.driver, _spec)
}

func (oetq *OrganizationEventTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(organizationeventtype.Table, organizationeventtype.Columns, sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt))
	_spec.From = oetq.sql
	if unique := oetq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oetq.path != nil {
		_spec.Unique = true
	}
	if fields := oetq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationeventtype.FieldID)
		for i := range fields {
			if fields[i] != organizationeventtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oetq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oetq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oetq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oetq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oetq *OrganizationEventTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oetq.driver.Dialect())
	t1 := builder.Table(organizationeventtype.Table)
	columns := oetq.ctx.Fields
	if len(columns) == 0 {
		columns = organizationeventtype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oetq.sql != nil {
		selector = oetq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oetq.ctx.Unique != nil && *oetq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oetq.predicates {
		p(selector)
	}
	for _, p := range oetq.order {
		p(selector)
	}
	if offset := oetq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oetq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrganizationEventTypeGroupBy is the group-by builder for OrganizationEventType entities.
type OrganizationEventTypeGroupBy struct {
	selector
	build *OrganizationEventTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oetgb *OrganizationEventTypeGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationEventTypeGroupBy {
	oetgb.fns = append(oetgb.fns, fns...)
	return oetgb
}

// Scan applies the selector query and scans the result into the given value.
func (oetgb *OrganizationEventTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oetgb.build.ctx, "GroupBy")
	if err := oetgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationEventTypeQuery, *OrganizationEventTypeGroupBy](ctx, oetgb.build, oetgb, oetgb.build.inters, v)
}

func (oetgb *OrganizationEventTypeGroupBy) sqlScan(ctx context.Context, root *OrganizationEventTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oetgb.fns))
	for _, fn := range oetgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oetgb.flds)+len(oetgb.fns))
		for _, f := range *oetgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oetgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oetgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrganizationEventTypeSelect is the builder for selecting fields of OrganizationEventType entities.
type OrganizationEventTypeSelect struct {
	*OrganizationEventTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oets *OrganizationEventTypeSelect) Aggregate(fns ...AggregateFunc) *OrganizationEventTypeSelect {
	oets.fns = append(oets.fns, fns...)
	return oets
}

// Scan applies the selector query and scans the result into the given value.
func (oets *OrganizationEventTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oets.ctx, "Select")
	if err := oets.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationEventTypeQuery, *OrganizationEventTypeSelect](ctx, oets.OrganizationEventTypeQuery, oets, oets.inters, v)
}

func (oets *OrganizationEventTypeSelect) sqlScan(ctx context.Context, root *OrganizationEventTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oets.fns))
	for _, fn := range oets.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oets.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
