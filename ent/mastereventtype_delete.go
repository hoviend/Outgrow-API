// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/mastereventtype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterEventTypeDelete is the builder for deleting a MasterEventType entity.
type MasterEventTypeDelete struct {
	config
	hooks    []Hook
	mutation *MasterEventTypeMutation
}

// Where appends a list predicates to the MasterEventTypeDelete builder.
func (metd *MasterEventTypeDelete) Where(ps ...predicate.MasterEventType) *MasterEventTypeDelete {
	metd.mutation.Where(ps...)
	return metd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (metd *MasterEventTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MasterEventTypeMutation](ctx, metd.sqlExec, metd.mutation, metd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (metd *MasterEventTypeDelete) ExecX(ctx context.Context) int {
	n, err := metd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (metd *MasterEventTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mastereventtype.Table, sqlgraph.NewFieldSpec(mastereventtype.FieldID, field.TypeInt))
	if ps := metd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, metd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	metd.mutation.done = true
	return affected, err
}

// MasterEventTypeDeleteOne is the builder for deleting a single MasterEventType entity.
type MasterEventTypeDeleteOne struct {
	metd *MasterEventTypeDelete
}

// Where appends a list predicates to the MasterEventTypeDelete builder.
func (metdo *MasterEventTypeDeleteOne) Where(ps ...predicate.MasterEventType) *MasterEventTypeDeleteOne {
	metdo.metd.mutation.Where(ps...)
	return metdo
}

// Exec executes the deletion query.
func (metdo *MasterEventTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := metdo.metd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mastereventtype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (metdo *MasterEventTypeDeleteOne) ExecX(ctx context.Context) {
	if err := metdo.Exec(ctx); err != nil {
		panic(err)
	}
}
