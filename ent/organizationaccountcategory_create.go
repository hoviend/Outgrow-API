// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/organizationaccount"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/organizationaccounttype"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationAccountCategoryCreate is the builder for creating a OrganizationAccountCategory entity.
type OrganizationAccountCategoryCreate struct {
	config
	mutation *OrganizationAccountCategoryMutation
	hooks    []Hook
}

// SetAccountTypeID sets the "account_type_id" field.
func (oacc *OrganizationAccountCategoryCreate) SetAccountTypeID(i int) *OrganizationAccountCategoryCreate {
	oacc.mutation.SetAccountTypeID(i)
	return oacc
}

// SetName sets the "name" field.
func (oacc *OrganizationAccountCategoryCreate) SetName(s string) *OrganizationAccountCategoryCreate {
	oacc.mutation.SetName(s)
	return oacc
}

// SetDescription sets the "description" field.
func (oacc *OrganizationAccountCategoryCreate) SetDescription(s string) *OrganizationAccountCategoryCreate {
	oacc.mutation.SetDescription(s)
	return oacc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oacc *OrganizationAccountCategoryCreate) SetNillableDescription(s *string) *OrganizationAccountCategoryCreate {
	if s != nil {
		oacc.SetDescription(*s)
	}
	return oacc
}

// SetCreatedAt sets the "created_at" field.
func (oacc *OrganizationAccountCategoryCreate) SetCreatedAt(t time.Time) *OrganizationAccountCategoryCreate {
	oacc.mutation.SetCreatedAt(t)
	return oacc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oacc *OrganizationAccountCategoryCreate) SetNillableCreatedAt(t *time.Time) *OrganizationAccountCategoryCreate {
	if t != nil {
		oacc.SetCreatedAt(*t)
	}
	return oacc
}

// AddAccountIDs adds the "accounts" edge to the OrganizationAccount entity by IDs.
func (oacc *OrganizationAccountCategoryCreate) AddAccountIDs(ids ...int) *OrganizationAccountCategoryCreate {
	oacc.mutation.AddAccountIDs(ids...)
	return oacc
}

// AddAccounts adds the "accounts" edges to the OrganizationAccount entity.
func (oacc *OrganizationAccountCategoryCreate) AddAccounts(o ...*OrganizationAccount) *OrganizationAccountCategoryCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oacc.AddAccountIDs(ids...)
}

// SetTypeID sets the "type" edge to the OrganizationAccountType entity by ID.
func (oacc *OrganizationAccountCategoryCreate) SetTypeID(id int) *OrganizationAccountCategoryCreate {
	oacc.mutation.SetTypeID(id)
	return oacc
}

// SetType sets the "type" edge to the OrganizationAccountType entity.
func (oacc *OrganizationAccountCategoryCreate) SetType(o *OrganizationAccountType) *OrganizationAccountCategoryCreate {
	return oacc.SetTypeID(o.ID)
}

// Mutation returns the OrganizationAccountCategoryMutation object of the builder.
func (oacc *OrganizationAccountCategoryCreate) Mutation() *OrganizationAccountCategoryMutation {
	return oacc.mutation
}

// Save creates the OrganizationAccountCategory in the database.
func (oacc *OrganizationAccountCategoryCreate) Save(ctx context.Context) (*OrganizationAccountCategory, error) {
	oacc.defaults()
	return withHooks[*OrganizationAccountCategory, OrganizationAccountCategoryMutation](ctx, oacc.sqlSave, oacc.mutation, oacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oacc *OrganizationAccountCategoryCreate) SaveX(ctx context.Context) *OrganizationAccountCategory {
	v, err := oacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacc *OrganizationAccountCategoryCreate) Exec(ctx context.Context) error {
	_, err := oacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacc *OrganizationAccountCategoryCreate) ExecX(ctx context.Context) {
	if err := oacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oacc *OrganizationAccountCategoryCreate) defaults() {
	if _, ok := oacc.mutation.CreatedAt(); !ok {
		v := organizationaccountcategory.DefaultCreatedAt()
		oacc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oacc *OrganizationAccountCategoryCreate) check() error {
	if _, ok := oacc.mutation.AccountTypeID(); !ok {
		return &ValidationError{Name: "account_type_id", err: errors.New(`ent: missing required field "OrganizationAccountCategory.account_type_id"`)}
	}
	if _, ok := oacc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrganizationAccountCategory.name"`)}
	}
	if v, ok := oacc.mutation.Name(); ok {
		if err := organizationaccountcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccountCategory.name": %w`, err)}
		}
	}
	if _, ok := oacc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationAccountCategory.created_at"`)}
	}
	if _, ok := oacc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required edge "OrganizationAccountCategory.type"`)}
	}
	return nil
}

func (oacc *OrganizationAccountCategoryCreate) sqlSave(ctx context.Context) (*OrganizationAccountCategory, error) {
	if err := oacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oacc.mutation.id = &_node.ID
	oacc.mutation.done = true
	return _node, nil
}

func (oacc *OrganizationAccountCategoryCreate) createSpec() (*OrganizationAccountCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationAccountCategory{config: oacc.config}
		_spec = sqlgraph.NewCreateSpec(organizationaccountcategory.Table, sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt))
	)
	if value, ok := oacc.mutation.Name(); ok {
		_spec.SetField(organizationaccountcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oacc.mutation.Description(); ok {
		_spec.SetField(organizationaccountcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := oacc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationaccountcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := oacc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccountcategory.AccountsTable,
			Columns: []string{organizationaccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oacc.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccountcategory.TypeTable,
			Columns: []string{organizationaccountcategory.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccounttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationAccountCategoryCreateBulk is the builder for creating many OrganizationAccountCategory entities in bulk.
type OrganizationAccountCategoryCreateBulk struct {
	config
	builders []*OrganizationAccountCategoryCreate
}

// Save creates the OrganizationAccountCategory entities in the database.
func (oaccb *OrganizationAccountCategoryCreateBulk) Save(ctx context.Context) ([]*OrganizationAccountCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oaccb.builders))
	nodes := make([]*OrganizationAccountCategory, len(oaccb.builders))
	mutators := make([]Mutator, len(oaccb.builders))
	for i := range oaccb.builders {
		func(i int, root context.Context) {
			builder := oaccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationAccountCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oaccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oaccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oaccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oaccb *OrganizationAccountCategoryCreateBulk) SaveX(ctx context.Context) []*OrganizationAccountCategory {
	v, err := oaccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaccb *OrganizationAccountCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := oaccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaccb *OrganizationAccountCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := oaccb.Exec(ctx); err != nil {
		panic(err)
	}
}
