// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/organization"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/organizationaccounttype"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrganizationAccountTypeCreate is the builder for creating a OrganizationAccountType entity.
type OrganizationAccountTypeCreate struct {
	config
	mutation *OrganizationAccountTypeMutation
	hooks    []Hook
}

// SetOrganizationID sets the "organization_id" field.
func (oatc *OrganizationAccountTypeCreate) SetOrganizationID(u uuid.UUID) *OrganizationAccountTypeCreate {
	oatc.mutation.SetOrganizationID(u)
	return oatc
}

// SetName sets the "name" field.
func (oatc *OrganizationAccountTypeCreate) SetName(s string) *OrganizationAccountTypeCreate {
	oatc.mutation.SetName(s)
	return oatc
}

// SetCreatedAt sets the "created_at" field.
func (oatc *OrganizationAccountTypeCreate) SetCreatedAt(t time.Time) *OrganizationAccountTypeCreate {
	oatc.mutation.SetCreatedAt(t)
	return oatc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oatc *OrganizationAccountTypeCreate) SetNillableCreatedAt(t *time.Time) *OrganizationAccountTypeCreate {
	if t != nil {
		oatc.SetCreatedAt(*t)
	}
	return oatc
}

// AddCategoryIDs adds the "categories" edge to the OrganizationAccountCategory entity by IDs.
func (oatc *OrganizationAccountTypeCreate) AddCategoryIDs(ids ...int) *OrganizationAccountTypeCreate {
	oatc.mutation.AddCategoryIDs(ids...)
	return oatc
}

// AddCategories adds the "categories" edges to the OrganizationAccountCategory entity.
func (oatc *OrganizationAccountTypeCreate) AddCategories(o ...*OrganizationAccountCategory) *OrganizationAccountTypeCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oatc.AddCategoryIDs(ids...)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oatc *OrganizationAccountTypeCreate) SetOrganization(o *Organization) *OrganizationAccountTypeCreate {
	return oatc.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationAccountTypeMutation object of the builder.
func (oatc *OrganizationAccountTypeCreate) Mutation() *OrganizationAccountTypeMutation {
	return oatc.mutation
}

// Save creates the OrganizationAccountType in the database.
func (oatc *OrganizationAccountTypeCreate) Save(ctx context.Context) (*OrganizationAccountType, error) {
	oatc.defaults()
	return withHooks[*OrganizationAccountType, OrganizationAccountTypeMutation](ctx, oatc.sqlSave, oatc.mutation, oatc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oatc *OrganizationAccountTypeCreate) SaveX(ctx context.Context) *OrganizationAccountType {
	v, err := oatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oatc *OrganizationAccountTypeCreate) Exec(ctx context.Context) error {
	_, err := oatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatc *OrganizationAccountTypeCreate) ExecX(ctx context.Context) {
	if err := oatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oatc *OrganizationAccountTypeCreate) defaults() {
	if _, ok := oatc.mutation.CreatedAt(); !ok {
		v := organizationaccounttype.DefaultCreatedAt()
		oatc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oatc *OrganizationAccountTypeCreate) check() error {
	if _, ok := oatc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrganizationAccountType.organization_id"`)}
	}
	if _, ok := oatc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrganizationAccountType.name"`)}
	}
	if v, ok := oatc.mutation.Name(); ok {
		if err := organizationaccounttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccountType.name": %w`, err)}
		}
	}
	if _, ok := oatc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationAccountType.created_at"`)}
	}
	if _, ok := oatc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationAccountType.organization"`)}
	}
	return nil
}

func (oatc *OrganizationAccountTypeCreate) sqlSave(ctx context.Context) (*OrganizationAccountType, error) {
	if err := oatc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oatc.mutation.id = &_node.ID
	oatc.mutation.done = true
	return _node, nil
}

func (oatc *OrganizationAccountTypeCreate) createSpec() (*OrganizationAccountType, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationAccountType{config: oatc.config}
		_spec = sqlgraph.NewCreateSpec(organizationaccounttype.Table, sqlgraph.NewFieldSpec(organizationaccounttype.FieldID, field.TypeInt))
	)
	if value, ok := oatc.mutation.Name(); ok {
		_spec.SetField(organizationaccounttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oatc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationaccounttype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := oatc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccounttype.CategoriesTable,
			Columns: []string{organizationaccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oatc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccounttype.OrganizationTable,
			Columns: []string{organizationaccounttype.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationAccountTypeCreateBulk is the builder for creating many OrganizationAccountType entities in bulk.
type OrganizationAccountTypeCreateBulk struct {
	config
	builders []*OrganizationAccountTypeCreate
}

// Save creates the OrganizationAccountType entities in the database.
func (oatcb *OrganizationAccountTypeCreateBulk) Save(ctx context.Context) ([]*OrganizationAccountType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oatcb.builders))
	nodes := make([]*OrganizationAccountType, len(oatcb.builders))
	mutators := make([]Mutator, len(oatcb.builders))
	for i := range oatcb.builders {
		func(i int, root context.Context) {
			builder := oatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationAccountTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oatcb *OrganizationAccountTypeCreateBulk) SaveX(ctx context.Context) []*OrganizationAccountType {
	v, err := oatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oatcb *OrganizationAccountTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := oatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatcb *OrganizationAccountTypeCreateBulk) ExecX(ctx context.Context) {
	if err := oatcb.Exec(ctx); err != nil {
		panic(err)
	}
}
