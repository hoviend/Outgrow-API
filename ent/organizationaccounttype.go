// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"outgrow/ent/organization"
	"outgrow/ent/organizationaccounttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OrganizationAccountType is the model entity for the OrganizationAccountType schema.
type OrganizationAccountType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationAccountTypeQuery when eager-loading is set.
	Edges OrganizationAccountTypeEdges `json:"edges"`
}

// OrganizationAccountTypeEdges holds the relations/edges for other nodes in the graph.
type OrganizationAccountTypeEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*OrganizationAccountCategory `json:"categories,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationAccountTypeEdges) CategoriesOrErr() ([]*OrganizationAccountCategory, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationAccountTypeEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[1] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationAccountType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationaccounttype.FieldID:
			values[i] = new(sql.NullInt64)
		case organizationaccounttype.FieldName:
			values[i] = new(sql.NullString)
		case organizationaccounttype.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case organizationaccounttype.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationAccountType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationAccountType fields.
func (oat *OrganizationAccountType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationaccounttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oat.ID = int(value.Int64)
		case organizationaccounttype.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				oat.OrganizationID = *value
			}
		case organizationaccounttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oat.Name = value.String
			}
		case organizationaccounttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oat.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCategories queries the "categories" edge of the OrganizationAccountType entity.
func (oat *OrganizationAccountType) QueryCategories() *OrganizationAccountCategoryQuery {
	return NewOrganizationAccountTypeClient(oat.config).QueryCategories(oat)
}

// QueryOrganization queries the "organization" edge of the OrganizationAccountType entity.
func (oat *OrganizationAccountType) QueryOrganization() *OrganizationQuery {
	return NewOrganizationAccountTypeClient(oat.config).QueryOrganization(oat)
}

// Update returns a builder for updating this OrganizationAccountType.
// Note that you need to call OrganizationAccountType.Unwrap() before calling this method if this OrganizationAccountType
// was returned from a transaction, and the transaction was committed or rolled back.
func (oat *OrganizationAccountType) Update() *OrganizationAccountTypeUpdateOne {
	return NewOrganizationAccountTypeClient(oat.config).UpdateOne(oat)
}

// Unwrap unwraps the OrganizationAccountType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oat *OrganizationAccountType) Unwrap() *OrganizationAccountType {
	_tx, ok := oat.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationAccountType is not a transactional entity")
	}
	oat.config.driver = _tx.drv
	return oat
}

// String implements the fmt.Stringer.
func (oat *OrganizationAccountType) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationAccountType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oat.ID))
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", oat.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oat.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oat.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationAccountTypes is a parsable slice of OrganizationAccountType.
type OrganizationAccountTypes []*OrganizationAccountType
