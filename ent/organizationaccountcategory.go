// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/organizationaccounttype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrganizationAccountCategory is the model entity for the OrganizationAccountCategory schema.
type OrganizationAccountCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountTypeID holds the value of the "account_type_id" field.
	AccountTypeID int `json:"account_type_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationAccountCategoryQuery when eager-loading is set.
	Edges        OrganizationAccountCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationAccountCategoryEdges holds the relations/edges for other nodes in the graph.
type OrganizationAccountCategoryEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*OrganizationAccount `json:"accounts,omitempty"`
	// Type holds the value of the type edge.
	Type *OrganizationAccountType `json:"type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationAccountCategoryEdges) AccountsOrErr() ([]*OrganizationAccount, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationAccountCategoryEdges) TypeOrErr() (*OrganizationAccountType, error) {
	if e.loadedTypes[1] {
		if e.Type == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organizationaccounttype.Label}
		}
		return e.Type, nil
	}
	return nil, &NotLoadedError{edge: "type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationAccountCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationaccountcategory.FieldID, organizationaccountcategory.FieldAccountTypeID:
			values[i] = new(sql.NullInt64)
		case organizationaccountcategory.FieldName, organizationaccountcategory.FieldDescription:
			values[i] = new(sql.NullString)
		case organizationaccountcategory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationAccountCategory fields.
func (oac *OrganizationAccountCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationaccountcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oac.ID = int(value.Int64)
		case organizationaccountcategory.FieldAccountTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_type_id", values[i])
			} else if value.Valid {
				oac.AccountTypeID = int(value.Int64)
			}
		case organizationaccountcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oac.Name = value.String
			}
		case organizationaccountcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oac.Description = value.String
			}
		case organizationaccountcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oac.CreatedAt = value.Time
			}
		default:
			oac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationAccountCategory.
// This includes values selected through modifiers, order, etc.
func (oac *OrganizationAccountCategory) Value(name string) (ent.Value, error) {
	return oac.selectValues.Get(name)
}

// QueryAccounts queries the "accounts" edge of the OrganizationAccountCategory entity.
func (oac *OrganizationAccountCategory) QueryAccounts() *OrganizationAccountQuery {
	return NewOrganizationAccountCategoryClient(oac.config).QueryAccounts(oac)
}

// QueryType queries the "type" edge of the OrganizationAccountCategory entity.
func (oac *OrganizationAccountCategory) QueryType() *OrganizationAccountTypeQuery {
	return NewOrganizationAccountCategoryClient(oac.config).QueryType(oac)
}

// Update returns a builder for updating this OrganizationAccountCategory.
// Note that you need to call OrganizationAccountCategory.Unwrap() before calling this method if this OrganizationAccountCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (oac *OrganizationAccountCategory) Update() *OrganizationAccountCategoryUpdateOne {
	return NewOrganizationAccountCategoryClient(oac.config).UpdateOne(oac)
}

// Unwrap unwraps the OrganizationAccountCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oac *OrganizationAccountCategory) Unwrap() *OrganizationAccountCategory {
	_tx, ok := oac.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationAccountCategory is not a transactional entity")
	}
	oac.config.driver = _tx.drv
	return oac
}

// String implements the fmt.Stringer.
func (oac *OrganizationAccountCategory) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationAccountCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oac.ID))
	builder.WriteString("account_type_id=")
	builder.WriteString(fmt.Sprintf("%v", oac.AccountTypeID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oac.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(oac.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oac.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationAccountCategories is a parsable slice of OrganizationAccountCategory.
type OrganizationAccountCategories []*OrganizationAccountCategory
