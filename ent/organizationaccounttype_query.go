// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"outgrow/ent/organization"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/organizationaccounttype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrganizationAccountTypeQuery is the builder for querying OrganizationAccountType entities.
type OrganizationAccountTypeQuery struct {
	config
	ctx              *QueryContext
	order            []organizationaccounttype.Order
	inters           []Interceptor
	predicates       []predicate.OrganizationAccountType
	withCategories   *OrganizationAccountCategoryQuery
	withOrganization *OrganizationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationAccountTypeQuery builder.
func (oatq *OrganizationAccountTypeQuery) Where(ps ...predicate.OrganizationAccountType) *OrganizationAccountTypeQuery {
	oatq.predicates = append(oatq.predicates, ps...)
	return oatq
}

// Limit the number of records to be returned by this query.
func (oatq *OrganizationAccountTypeQuery) Limit(limit int) *OrganizationAccountTypeQuery {
	oatq.ctx.Limit = &limit
	return oatq
}

// Offset to start from.
func (oatq *OrganizationAccountTypeQuery) Offset(offset int) *OrganizationAccountTypeQuery {
	oatq.ctx.Offset = &offset
	return oatq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oatq *OrganizationAccountTypeQuery) Unique(unique bool) *OrganizationAccountTypeQuery {
	oatq.ctx.Unique = &unique
	return oatq
}

// Order specifies how the records should be ordered.
func (oatq *OrganizationAccountTypeQuery) Order(o ...organizationaccounttype.Order) *OrganizationAccountTypeQuery {
	oatq.order = append(oatq.order, o...)
	return oatq
}

// QueryCategories chains the current query on the "categories" edge.
func (oatq *OrganizationAccountTypeQuery) QueryCategories() *OrganizationAccountCategoryQuery {
	query := (&OrganizationAccountCategoryClient{config: oatq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccounttype.Table, organizationaccounttype.FieldID, selector),
			sqlgraph.To(organizationaccountcategory.Table, organizationaccountcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationaccounttype.CategoriesTable, organizationaccounttype.CategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(oatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (oatq *OrganizationAccountTypeQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: oatq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccounttype.Table, organizationaccounttype.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationaccounttype.OrganizationTable, organizationaccounttype.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(oatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrganizationAccountType entity from the query.
// Returns a *NotFoundError when no OrganizationAccountType was found.
func (oatq *OrganizationAccountTypeQuery) First(ctx context.Context) (*OrganizationAccountType, error) {
	nodes, err := oatq.Limit(1).All(setContextOp(ctx, oatq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organizationaccounttype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) FirstX(ctx context.Context) *OrganizationAccountType {
	node, err := oatq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrganizationAccountType ID from the query.
// Returns a *NotFoundError when no OrganizationAccountType ID was found.
func (oatq *OrganizationAccountTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oatq.Limit(1).IDs(setContextOp(ctx, oatq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organizationaccounttype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := oatq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrganizationAccountType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrganizationAccountType entity is found.
// Returns a *NotFoundError when no OrganizationAccountType entities are found.
func (oatq *OrganizationAccountTypeQuery) Only(ctx context.Context) (*OrganizationAccountType, error) {
	nodes, err := oatq.Limit(2).All(setContextOp(ctx, oatq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organizationaccounttype.Label}
	default:
		return nil, &NotSingularError{organizationaccounttype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) OnlyX(ctx context.Context) *OrganizationAccountType {
	node, err := oatq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrganizationAccountType ID in the query.
// Returns a *NotSingularError when more than one OrganizationAccountType ID is found.
// Returns a *NotFoundError when no entities are found.
func (oatq *OrganizationAccountTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oatq.Limit(2).IDs(setContextOp(ctx, oatq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organizationaccounttype.Label}
	default:
		err = &NotSingularError{organizationaccounttype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := oatq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrganizationAccountTypes.
func (oatq *OrganizationAccountTypeQuery) All(ctx context.Context) ([]*OrganizationAccountType, error) {
	ctx = setContextOp(ctx, oatq.ctx, "All")
	if err := oatq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrganizationAccountType, *OrganizationAccountTypeQuery]()
	return withInterceptors[[]*OrganizationAccountType](ctx, oatq, qr, oatq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) AllX(ctx context.Context) []*OrganizationAccountType {
	nodes, err := oatq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrganizationAccountType IDs.
func (oatq *OrganizationAccountTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oatq.ctx.Unique == nil && oatq.path != nil {
		oatq.Unique(true)
	}
	ctx = setContextOp(ctx, oatq.ctx, "IDs")
	if err = oatq.Select(organizationaccounttype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := oatq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oatq *OrganizationAccountTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oatq.ctx, "Count")
	if err := oatq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oatq, querierCount[*OrganizationAccountTypeQuery](), oatq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) CountX(ctx context.Context) int {
	count, err := oatq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oatq *OrganizationAccountTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oatq.ctx, "Exist")
	switch _, err := oatq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oatq *OrganizationAccountTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := oatq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationAccountTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oatq *OrganizationAccountTypeQuery) Clone() *OrganizationAccountTypeQuery {
	if oatq == nil {
		return nil
	}
	return &OrganizationAccountTypeQuery{
		config:           oatq.config,
		ctx:              oatq.ctx.Clone(),
		order:            append([]organizationaccounttype.Order{}, oatq.order...),
		inters:           append([]Interceptor{}, oatq.inters...),
		predicates:       append([]predicate.OrganizationAccountType{}, oatq.predicates...),
		withCategories:   oatq.withCategories.Clone(),
		withOrganization: oatq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  oatq.sql.Clone(),
		path: oatq.path,
	}
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (oatq *OrganizationAccountTypeQuery) WithCategories(opts ...func(*OrganizationAccountCategoryQuery)) *OrganizationAccountTypeQuery {
	query := (&OrganizationAccountCategoryClient{config: oatq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oatq.withCategories = query
	return oatq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (oatq *OrganizationAccountTypeQuery) WithOrganization(opts ...func(*OrganizationQuery)) *OrganizationAccountTypeQuery {
	query := (&OrganizationClient{config: oatq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oatq.withOrganization = query
	return oatq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrganizationID uuid.UUID `json:"organization_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrganizationAccountType.Query().
//		GroupBy(organizationaccounttype.FieldOrganizationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oatq *OrganizationAccountTypeQuery) GroupBy(field string, fields ...string) *OrganizationAccountTypeGroupBy {
	oatq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrganizationAccountTypeGroupBy{build: oatq}
	grbuild.flds = &oatq.ctx.Fields
	grbuild.label = organizationaccounttype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrganizationID uuid.UUID `json:"organization_id,omitempty"`
//	}
//
//	client.OrganizationAccountType.Query().
//		Select(organizationaccounttype.FieldOrganizationID).
//		Scan(ctx, &v)
func (oatq *OrganizationAccountTypeQuery) Select(fields ...string) *OrganizationAccountTypeSelect {
	oatq.ctx.Fields = append(oatq.ctx.Fields, fields...)
	sbuild := &OrganizationAccountTypeSelect{OrganizationAccountTypeQuery: oatq}
	sbuild.label = organizationaccounttype.Label
	sbuild.flds, sbuild.scan = &oatq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrganizationAccountTypeSelect configured with the given aggregations.
func (oatq *OrganizationAccountTypeQuery) Aggregate(fns ...AggregateFunc) *OrganizationAccountTypeSelect {
	return oatq.Select().Aggregate(fns...)
}

func (oatq *OrganizationAccountTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oatq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oatq); err != nil {
				return err
			}
		}
	}
	for _, f := range oatq.ctx.Fields {
		if !organizationaccounttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oatq.path != nil {
		prev, err := oatq.path(ctx)
		if err != nil {
			return err
		}
		oatq.sql = prev
	}
	return nil
}

func (oatq *OrganizationAccountTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrganizationAccountType, error) {
	var (
		nodes       = []*OrganizationAccountType{}
		_spec       = oatq.querySpec()
		loadedTypes = [2]bool{
			oatq.withCategories != nil,
			oatq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrganizationAccountType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrganizationAccountType{config: oatq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oatq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oatq.withCategories; query != nil {
		if err := oatq.loadCategories(ctx, query, nodes,
			func(n *OrganizationAccountType) { n.Edges.Categories = []*OrganizationAccountCategory{} },
			func(n *OrganizationAccountType, e *OrganizationAccountCategory) {
				n.Edges.Categories = append(n.Edges.Categories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := oatq.withOrganization; query != nil {
		if err := oatq.loadOrganization(ctx, query, nodes, nil,
			func(n *OrganizationAccountType, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oatq *OrganizationAccountTypeQuery) loadCategories(ctx context.Context, query *OrganizationAccountCategoryQuery, nodes []*OrganizationAccountType, init func(*OrganizationAccountType), assign func(*OrganizationAccountType, *OrganizationAccountCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OrganizationAccountType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.OrganizationAccountCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(organizationaccounttype.CategoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AccountTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oatq *OrganizationAccountTypeQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*OrganizationAccountType, init func(*OrganizationAccountType), assign func(*OrganizationAccountType, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OrganizationAccountType)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oatq *OrganizationAccountTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oatq.querySpec()
	_spec.Node.Columns = oatq.ctx.Fields
	if len(oatq.ctx.Fields) > 0 {
		_spec.Unique = oatq.ctx.Unique != nil && *oatq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oatq.driver, _spec)
}

func (oatq *OrganizationAccountTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(organizationaccounttype.Table, organizationaccounttype.Columns, sqlgraph.NewFieldSpec(organizationaccounttype.FieldID, field.TypeInt))
	_spec.From = oatq.sql
	if unique := oatq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oatq.path != nil {
		_spec.Unique = true
	}
	if fields := oatq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationaccounttype.FieldID)
		for i := range fields {
			if fields[i] != organizationaccounttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oatq.withOrganization != nil {
			_spec.Node.AddColumnOnce(organizationaccounttype.FieldOrganizationID)
		}
	}
	if ps := oatq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oatq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oatq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oatq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oatq *OrganizationAccountTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oatq.driver.Dialect())
	t1 := builder.Table(organizationaccounttype.Table)
	columns := oatq.ctx.Fields
	if len(columns) == 0 {
		columns = organizationaccounttype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oatq.sql != nil {
		selector = oatq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oatq.ctx.Unique != nil && *oatq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oatq.predicates {
		p(selector)
	}
	for _, p := range oatq.order {
		p(selector)
	}
	if offset := oatq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oatq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrganizationAccountTypeGroupBy is the group-by builder for OrganizationAccountType entities.
type OrganizationAccountTypeGroupBy struct {
	selector
	build *OrganizationAccountTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oatgb *OrganizationAccountTypeGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationAccountTypeGroupBy {
	oatgb.fns = append(oatgb.fns, fns...)
	return oatgb
}

// Scan applies the selector query and scans the result into the given value.
func (oatgb *OrganizationAccountTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oatgb.build.ctx, "GroupBy")
	if err := oatgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationAccountTypeQuery, *OrganizationAccountTypeGroupBy](ctx, oatgb.build, oatgb, oatgb.build.inters, v)
}

func (oatgb *OrganizationAccountTypeGroupBy) sqlScan(ctx context.Context, root *OrganizationAccountTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oatgb.fns))
	for _, fn := range oatgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oatgb.flds)+len(oatgb.fns))
		for _, f := range *oatgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oatgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oatgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrganizationAccountTypeSelect is the builder for selecting fields of OrganizationAccountType entities.
type OrganizationAccountTypeSelect struct {
	*OrganizationAccountTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oats *OrganizationAccountTypeSelect) Aggregate(fns ...AggregateFunc) *OrganizationAccountTypeSelect {
	oats.fns = append(oats.fns, fns...)
	return oats
}

// Scan applies the selector query and scans the result into the given value.
func (oats *OrganizationAccountTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oats.ctx, "Select")
	if err := oats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationAccountTypeQuery, *OrganizationAccountTypeSelect](ctx, oats.OrganizationAccountTypeQuery, oats, oats.inters, v)
}

func (oats *OrganizationAccountTypeSelect) sqlScan(ctx context.Context, root *OrganizationAccountTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oats.fns))
	for _, fn := range oats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
