// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountCategoryUpdate is the builder for updating MasterAccountCategory entities.
type MasterAccountCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *MasterAccountCategoryMutation
}

// Where appends a list predicates to the MasterAccountCategoryUpdate builder.
func (macu *MasterAccountCategoryUpdate) Where(ps ...predicate.MasterAccountCategory) *MasterAccountCategoryUpdate {
	macu.mutation.Where(ps...)
	return macu
}

// SetAccountTypeID sets the "account_type_id" field.
func (macu *MasterAccountCategoryUpdate) SetAccountTypeID(i int) *MasterAccountCategoryUpdate {
	macu.mutation.SetAccountTypeID(i)
	return macu
}

// SetName sets the "name" field.
func (macu *MasterAccountCategoryUpdate) SetName(s string) *MasterAccountCategoryUpdate {
	macu.mutation.SetName(s)
	return macu
}

// SetDescription sets the "description" field.
func (macu *MasterAccountCategoryUpdate) SetDescription(s string) *MasterAccountCategoryUpdate {
	macu.mutation.SetDescription(s)
	return macu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (macu *MasterAccountCategoryUpdate) SetNillableDescription(s *string) *MasterAccountCategoryUpdate {
	if s != nil {
		macu.SetDescription(*s)
	}
	return macu
}

// ClearDescription clears the value of the "description" field.
func (macu *MasterAccountCategoryUpdate) ClearDescription() *MasterAccountCategoryUpdate {
	macu.mutation.ClearDescription()
	return macu
}

// AddAccountIDs adds the "accounts" edge to the MasterAccount entity by IDs.
func (macu *MasterAccountCategoryUpdate) AddAccountIDs(ids ...int) *MasterAccountCategoryUpdate {
	macu.mutation.AddAccountIDs(ids...)
	return macu
}

// AddAccounts adds the "accounts" edges to the MasterAccount entity.
func (macu *MasterAccountCategoryUpdate) AddAccounts(m ...*MasterAccount) *MasterAccountCategoryUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return macu.AddAccountIDs(ids...)
}

// SetAccTypeID sets the "accType" edge to the MasterAccountType entity by ID.
func (macu *MasterAccountCategoryUpdate) SetAccTypeID(id int) *MasterAccountCategoryUpdate {
	macu.mutation.SetAccTypeID(id)
	return macu
}

// SetAccType sets the "accType" edge to the MasterAccountType entity.
func (macu *MasterAccountCategoryUpdate) SetAccType(m *MasterAccountType) *MasterAccountCategoryUpdate {
	return macu.SetAccTypeID(m.ID)
}

// Mutation returns the MasterAccountCategoryMutation object of the builder.
func (macu *MasterAccountCategoryUpdate) Mutation() *MasterAccountCategoryMutation {
	return macu.mutation
}

// ClearAccounts clears all "accounts" edges to the MasterAccount entity.
func (macu *MasterAccountCategoryUpdate) ClearAccounts() *MasterAccountCategoryUpdate {
	macu.mutation.ClearAccounts()
	return macu
}

// RemoveAccountIDs removes the "accounts" edge to MasterAccount entities by IDs.
func (macu *MasterAccountCategoryUpdate) RemoveAccountIDs(ids ...int) *MasterAccountCategoryUpdate {
	macu.mutation.RemoveAccountIDs(ids...)
	return macu
}

// RemoveAccounts removes "accounts" edges to MasterAccount entities.
func (macu *MasterAccountCategoryUpdate) RemoveAccounts(m ...*MasterAccount) *MasterAccountCategoryUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return macu.RemoveAccountIDs(ids...)
}

// ClearAccType clears the "accType" edge to the MasterAccountType entity.
func (macu *MasterAccountCategoryUpdate) ClearAccType() *MasterAccountCategoryUpdate {
	macu.mutation.ClearAccType()
	return macu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (macu *MasterAccountCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountCategoryMutation](ctx, macu.sqlSave, macu.mutation, macu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (macu *MasterAccountCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := macu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (macu *MasterAccountCategoryUpdate) Exec(ctx context.Context) error {
	_, err := macu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macu *MasterAccountCategoryUpdate) ExecX(ctx context.Context) {
	if err := macu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macu *MasterAccountCategoryUpdate) check() error {
	if v, ok := macu.mutation.Name(); ok {
		if err := masteraccountcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccountCategory.name": %w`, err)}
		}
	}
	if _, ok := macu.mutation.AccTypeID(); macu.mutation.AccTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MasterAccountCategory.accType"`)
	}
	return nil
}

func (macu *MasterAccountCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := macu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccountcategory.Table, masteraccountcategory.Columns, sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt))
	if ps := macu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := macu.mutation.Name(); ok {
		_spec.SetField(masteraccountcategory.FieldName, field.TypeString, value)
	}
	if value, ok := macu.mutation.Description(); ok {
		_spec.SetField(masteraccountcategory.FieldDescription, field.TypeString, value)
	}
	if macu.mutation.DescriptionCleared() {
		_spec.ClearField(masteraccountcategory.FieldDescription, field.TypeString)
	}
	if macu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !macu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if macu.mutation.AccTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccountcategory.AccTypeTable,
			Columns: []string{masteraccountcategory.AccTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macu.mutation.AccTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccountcategory.AccTypeTable,
			Columns: []string{masteraccountcategory.AccTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, macu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccountcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	macu.mutation.done = true
	return n, nil
}

// MasterAccountCategoryUpdateOne is the builder for updating a single MasterAccountCategory entity.
type MasterAccountCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MasterAccountCategoryMutation
}

// SetAccountTypeID sets the "account_type_id" field.
func (macuo *MasterAccountCategoryUpdateOne) SetAccountTypeID(i int) *MasterAccountCategoryUpdateOne {
	macuo.mutation.SetAccountTypeID(i)
	return macuo
}

// SetName sets the "name" field.
func (macuo *MasterAccountCategoryUpdateOne) SetName(s string) *MasterAccountCategoryUpdateOne {
	macuo.mutation.SetName(s)
	return macuo
}

// SetDescription sets the "description" field.
func (macuo *MasterAccountCategoryUpdateOne) SetDescription(s string) *MasterAccountCategoryUpdateOne {
	macuo.mutation.SetDescription(s)
	return macuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (macuo *MasterAccountCategoryUpdateOne) SetNillableDescription(s *string) *MasterAccountCategoryUpdateOne {
	if s != nil {
		macuo.SetDescription(*s)
	}
	return macuo
}

// ClearDescription clears the value of the "description" field.
func (macuo *MasterAccountCategoryUpdateOne) ClearDescription() *MasterAccountCategoryUpdateOne {
	macuo.mutation.ClearDescription()
	return macuo
}

// AddAccountIDs adds the "accounts" edge to the MasterAccount entity by IDs.
func (macuo *MasterAccountCategoryUpdateOne) AddAccountIDs(ids ...int) *MasterAccountCategoryUpdateOne {
	macuo.mutation.AddAccountIDs(ids...)
	return macuo
}

// AddAccounts adds the "accounts" edges to the MasterAccount entity.
func (macuo *MasterAccountCategoryUpdateOne) AddAccounts(m ...*MasterAccount) *MasterAccountCategoryUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return macuo.AddAccountIDs(ids...)
}

// SetAccTypeID sets the "accType" edge to the MasterAccountType entity by ID.
func (macuo *MasterAccountCategoryUpdateOne) SetAccTypeID(id int) *MasterAccountCategoryUpdateOne {
	macuo.mutation.SetAccTypeID(id)
	return macuo
}

// SetAccType sets the "accType" edge to the MasterAccountType entity.
func (macuo *MasterAccountCategoryUpdateOne) SetAccType(m *MasterAccountType) *MasterAccountCategoryUpdateOne {
	return macuo.SetAccTypeID(m.ID)
}

// Mutation returns the MasterAccountCategoryMutation object of the builder.
func (macuo *MasterAccountCategoryUpdateOne) Mutation() *MasterAccountCategoryMutation {
	return macuo.mutation
}

// ClearAccounts clears all "accounts" edges to the MasterAccount entity.
func (macuo *MasterAccountCategoryUpdateOne) ClearAccounts() *MasterAccountCategoryUpdateOne {
	macuo.mutation.ClearAccounts()
	return macuo
}

// RemoveAccountIDs removes the "accounts" edge to MasterAccount entities by IDs.
func (macuo *MasterAccountCategoryUpdateOne) RemoveAccountIDs(ids ...int) *MasterAccountCategoryUpdateOne {
	macuo.mutation.RemoveAccountIDs(ids...)
	return macuo
}

// RemoveAccounts removes "accounts" edges to MasterAccount entities.
func (macuo *MasterAccountCategoryUpdateOne) RemoveAccounts(m ...*MasterAccount) *MasterAccountCategoryUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return macuo.RemoveAccountIDs(ids...)
}

// ClearAccType clears the "accType" edge to the MasterAccountType entity.
func (macuo *MasterAccountCategoryUpdateOne) ClearAccType() *MasterAccountCategoryUpdateOne {
	macuo.mutation.ClearAccType()
	return macuo
}

// Where appends a list predicates to the MasterAccountCategoryUpdate builder.
func (macuo *MasterAccountCategoryUpdateOne) Where(ps ...predicate.MasterAccountCategory) *MasterAccountCategoryUpdateOne {
	macuo.mutation.Where(ps...)
	return macuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (macuo *MasterAccountCategoryUpdateOne) Select(field string, fields ...string) *MasterAccountCategoryUpdateOne {
	macuo.fields = append([]string{field}, fields...)
	return macuo
}

// Save executes the query and returns the updated MasterAccountCategory entity.
func (macuo *MasterAccountCategoryUpdateOne) Save(ctx context.Context) (*MasterAccountCategory, error) {
	return withHooks[*MasterAccountCategory, MasterAccountCategoryMutation](ctx, macuo.sqlSave, macuo.mutation, macuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (macuo *MasterAccountCategoryUpdateOne) SaveX(ctx context.Context) *MasterAccountCategory {
	node, err := macuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (macuo *MasterAccountCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := macuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macuo *MasterAccountCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := macuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macuo *MasterAccountCategoryUpdateOne) check() error {
	if v, ok := macuo.mutation.Name(); ok {
		if err := masteraccountcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccountCategory.name": %w`, err)}
		}
	}
	if _, ok := macuo.mutation.AccTypeID(); macuo.mutation.AccTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MasterAccountCategory.accType"`)
	}
	return nil
}

func (macuo *MasterAccountCategoryUpdateOne) sqlSave(ctx context.Context) (_node *MasterAccountCategory, err error) {
	if err := macuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccountcategory.Table, masteraccountcategory.Columns, sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt))
	id, ok := macuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MasterAccountCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := macuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, masteraccountcategory.FieldID)
		for _, f := range fields {
			if !masteraccountcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != masteraccountcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := macuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := macuo.mutation.Name(); ok {
		_spec.SetField(masteraccountcategory.FieldName, field.TypeString, value)
	}
	if value, ok := macuo.mutation.Description(); ok {
		_spec.SetField(masteraccountcategory.FieldDescription, field.TypeString, value)
	}
	if macuo.mutation.DescriptionCleared() {
		_spec.ClearField(masteraccountcategory.FieldDescription, field.TypeString)
	}
	if macuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !macuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if macuo.mutation.AccTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccountcategory.AccTypeTable,
			Columns: []string{masteraccountcategory.AccTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macuo.mutation.AccTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccountcategory.AccTypeTable,
			Columns: []string{masteraccountcategory.AccTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MasterAccountCategory{config: macuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, macuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccountcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	macuo.mutation.done = true
	return _node, nil
}
