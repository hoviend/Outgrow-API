// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/masteraccount"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountDelete is the builder for deleting a MasterAccount entity.
type MasterAccountDelete struct {
	config
	hooks    []Hook
	mutation *MasterAccountMutation
}

// Where appends a list predicates to the MasterAccountDelete builder.
func (mad *MasterAccountDelete) Where(ps ...predicate.MasterAccount) *MasterAccountDelete {
	mad.mutation.Where(ps...)
	return mad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mad *MasterAccountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountMutation](ctx, mad.sqlExec, mad.mutation, mad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mad *MasterAccountDelete) ExecX(ctx context.Context) int {
	n, err := mad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mad *MasterAccountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(masteraccount.Table, sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt))
	if ps := mad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mad.mutation.done = true
	return affected, err
}

// MasterAccountDeleteOne is the builder for deleting a single MasterAccount entity.
type MasterAccountDeleteOne struct {
	mad *MasterAccountDelete
}

// Where appends a list predicates to the MasterAccountDelete builder.
func (mado *MasterAccountDeleteOne) Where(ps ...predicate.MasterAccount) *MasterAccountDeleteOne {
	mado.mad.mutation.Where(ps...)
	return mado
}

// Exec executes the deletion query.
func (mado *MasterAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := mado.mad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{masteraccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mado *MasterAccountDeleteOne) ExecX(ctx context.Context) {
	if err := mado.Exec(ctx); err != nil {
		panic(err)
	}
}
