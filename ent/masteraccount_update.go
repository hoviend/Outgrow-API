// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountUpdate is the builder for updating MasterAccount entities.
type MasterAccountUpdate struct {
	config
	hooks    []Hook
	mutation *MasterAccountMutation
}

// Where appends a list predicates to the MasterAccountUpdate builder.
func (mau *MasterAccountUpdate) Where(ps ...predicate.MasterAccount) *MasterAccountUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetCategoryID sets the "category_id" field.
func (mau *MasterAccountUpdate) SetCategoryID(i int) *MasterAccountUpdate {
	mau.mutation.SetCategoryID(i)
	return mau
}

// SetName sets the "name" field.
func (mau *MasterAccountUpdate) SetName(s string) *MasterAccountUpdate {
	mau.mutation.SetName(s)
	return mau
}

// SetAccCategoryID sets the "accCategory" edge to the MasterAccountCategory entity by ID.
func (mau *MasterAccountUpdate) SetAccCategoryID(id int) *MasterAccountUpdate {
	mau.mutation.SetAccCategoryID(id)
	return mau
}

// SetAccCategory sets the "accCategory" edge to the MasterAccountCategory entity.
func (mau *MasterAccountUpdate) SetAccCategory(m *MasterAccountCategory) *MasterAccountUpdate {
	return mau.SetAccCategoryID(m.ID)
}

// Mutation returns the MasterAccountMutation object of the builder.
func (mau *MasterAccountUpdate) Mutation() *MasterAccountMutation {
	return mau.mutation
}

// ClearAccCategory clears the "accCategory" edge to the MasterAccountCategory entity.
func (mau *MasterAccountUpdate) ClearAccCategory() *MasterAccountUpdate {
	mau.mutation.ClearAccCategory()
	return mau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *MasterAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountMutation](ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MasterAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MasterAccountUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MasterAccountUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mau *MasterAccountUpdate) check() error {
	if v, ok := mau.mutation.CategoryID(); ok {
		if err := masteraccount.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.category_id": %w`, err)}
		}
	}
	if v, ok := mau.mutation.Name(); ok {
		if err := masteraccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.name": %w`, err)}
		}
	}
	if _, ok := mau.mutation.AccCategoryID(); mau.mutation.AccCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MasterAccount.accCategory"`)
	}
	return nil
}

func (mau *MasterAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccount.Table, masteraccount.Columns, sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.Name(); ok {
		_spec.SetField(masteraccount.FieldName, field.TypeString, value)
	}
	if mau.mutation.AccCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccount.AccCategoryTable,
			Columns: []string{masteraccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.AccCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccount.AccCategoryTable,
			Columns: []string{masteraccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// MasterAccountUpdateOne is the builder for updating a single MasterAccount entity.
type MasterAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MasterAccountMutation
}

// SetCategoryID sets the "category_id" field.
func (mauo *MasterAccountUpdateOne) SetCategoryID(i int) *MasterAccountUpdateOne {
	mauo.mutation.SetCategoryID(i)
	return mauo
}

// SetName sets the "name" field.
func (mauo *MasterAccountUpdateOne) SetName(s string) *MasterAccountUpdateOne {
	mauo.mutation.SetName(s)
	return mauo
}

// SetAccCategoryID sets the "accCategory" edge to the MasterAccountCategory entity by ID.
func (mauo *MasterAccountUpdateOne) SetAccCategoryID(id int) *MasterAccountUpdateOne {
	mauo.mutation.SetAccCategoryID(id)
	return mauo
}

// SetAccCategory sets the "accCategory" edge to the MasterAccountCategory entity.
func (mauo *MasterAccountUpdateOne) SetAccCategory(m *MasterAccountCategory) *MasterAccountUpdateOne {
	return mauo.SetAccCategoryID(m.ID)
}

// Mutation returns the MasterAccountMutation object of the builder.
func (mauo *MasterAccountUpdateOne) Mutation() *MasterAccountMutation {
	return mauo.mutation
}

// ClearAccCategory clears the "accCategory" edge to the MasterAccountCategory entity.
func (mauo *MasterAccountUpdateOne) ClearAccCategory() *MasterAccountUpdateOne {
	mauo.mutation.ClearAccCategory()
	return mauo
}

// Where appends a list predicates to the MasterAccountUpdate builder.
func (mauo *MasterAccountUpdateOne) Where(ps ...predicate.MasterAccount) *MasterAccountUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *MasterAccountUpdateOne) Select(field string, fields ...string) *MasterAccountUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated MasterAccount entity.
func (mauo *MasterAccountUpdateOne) Save(ctx context.Context) (*MasterAccount, error) {
	return withHooks[*MasterAccount, MasterAccountMutation](ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MasterAccountUpdateOne) SaveX(ctx context.Context) *MasterAccount {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *MasterAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MasterAccountUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mauo *MasterAccountUpdateOne) check() error {
	if v, ok := mauo.mutation.CategoryID(); ok {
		if err := masteraccount.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.category_id": %w`, err)}
		}
	}
	if v, ok := mauo.mutation.Name(); ok {
		if err := masteraccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccount.name": %w`, err)}
		}
	}
	if _, ok := mauo.mutation.AccCategoryID(); mauo.mutation.AccCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MasterAccount.accCategory"`)
	}
	return nil
}

func (mauo *MasterAccountUpdateOne) sqlSave(ctx context.Context) (_node *MasterAccount, err error) {
	if err := mauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccount.Table, masteraccount.Columns, sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt))
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MasterAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, masteraccount.FieldID)
		for _, f := range fields {
			if !masteraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != masteraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.Name(); ok {
		_spec.SetField(masteraccount.FieldName, field.TypeString, value)
	}
	if mauo.mutation.AccCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccount.AccCategoryTable,
			Columns: []string{masteraccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.AccCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccount.AccCategoryTable,
			Columns: []string{masteraccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MasterAccount{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
