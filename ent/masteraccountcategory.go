// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MasterAccountCategory is the model entity for the MasterAccountCategory schema.
type MasterAccountCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountTypeID holds the value of the "account_type_id" field.
	AccountTypeID int `json:"account_type_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MasterAccountCategoryQuery when eager-loading is set.
	Edges MasterAccountCategoryEdges `json:"edges"`
}

// MasterAccountCategoryEdges holds the relations/edges for other nodes in the graph.
type MasterAccountCategoryEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*MasterAccount `json:"accounts,omitempty"`
	// AccType holds the value of the accType edge.
	AccType *MasterAccountType `json:"accType,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e MasterAccountCategoryEdges) AccountsOrErr() ([]*MasterAccount, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// AccTypeOrErr returns the AccType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MasterAccountCategoryEdges) AccTypeOrErr() (*MasterAccountType, error) {
	if e.loadedTypes[1] {
		if e.AccType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: masteraccounttype.Label}
		}
		return e.AccType, nil
	}
	return nil, &NotLoadedError{edge: "accType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MasterAccountCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case masteraccountcategory.FieldID, masteraccountcategory.FieldAccountTypeID:
			values[i] = new(sql.NullInt64)
		case masteraccountcategory.FieldName, masteraccountcategory.FieldDescription:
			values[i] = new(sql.NullString)
		case masteraccountcategory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MasterAccountCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MasterAccountCategory fields.
func (mac *MasterAccountCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case masteraccountcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mac.ID = int(value.Int64)
		case masteraccountcategory.FieldAccountTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_type_id", values[i])
			} else if value.Valid {
				mac.AccountTypeID = int(value.Int64)
			}
		case masteraccountcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mac.Name = value.String
			}
		case masteraccountcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mac.Description = value.String
			}
		case masteraccountcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mac.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the MasterAccountCategory entity.
func (mac *MasterAccountCategory) QueryAccounts() *MasterAccountQuery {
	return NewMasterAccountCategoryClient(mac.config).QueryAccounts(mac)
}

// QueryAccType queries the "accType" edge of the MasterAccountCategory entity.
func (mac *MasterAccountCategory) QueryAccType() *MasterAccountTypeQuery {
	return NewMasterAccountCategoryClient(mac.config).QueryAccType(mac)
}

// Update returns a builder for updating this MasterAccountCategory.
// Note that you need to call MasterAccountCategory.Unwrap() before calling this method if this MasterAccountCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (mac *MasterAccountCategory) Update() *MasterAccountCategoryUpdateOne {
	return NewMasterAccountCategoryClient(mac.config).UpdateOne(mac)
}

// Unwrap unwraps the MasterAccountCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mac *MasterAccountCategory) Unwrap() *MasterAccountCategory {
	_tx, ok := mac.config.driver.(*txDriver)
	if !ok {
		panic("ent: MasterAccountCategory is not a transactional entity")
	}
	mac.config.driver = _tx.drv
	return mac
}

// String implements the fmt.Stringer.
func (mac *MasterAccountCategory) String() string {
	var builder strings.Builder
	builder.WriteString("MasterAccountCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mac.ID))
	builder.WriteString("account_type_id=")
	builder.WriteString(fmt.Sprintf("%v", mac.AccountTypeID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mac.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mac.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mac.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MasterAccountCategories is a parsable slice of MasterAccountCategory.
type MasterAccountCategories []*MasterAccountCategory
