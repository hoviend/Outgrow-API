// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"outgrow/ent/migrate"

	"outgrow/ent/event"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"outgrow/ent/mastereventtype"
	"outgrow/ent/organization"
	"outgrow/ent/organizationaccount"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/organizationaccounttype"
	"outgrow/ent/organizationeventtype"
	"outgrow/ent/transaction"
	"outgrow/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// MasterAccount is the client for interacting with the MasterAccount builders.
	MasterAccount *MasterAccountClient
	// MasterAccountCategory is the client for interacting with the MasterAccountCategory builders.
	MasterAccountCategory *MasterAccountCategoryClient
	// MasterAccountType is the client for interacting with the MasterAccountType builders.
	MasterAccountType *MasterAccountTypeClient
	// MasterEventType is the client for interacting with the MasterEventType builders.
	MasterEventType *MasterEventTypeClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationAccount is the client for interacting with the OrganizationAccount builders.
	OrganizationAccount *OrganizationAccountClient
	// OrganizationAccountCategory is the client for interacting with the OrganizationAccountCategory builders.
	OrganizationAccountCategory *OrganizationAccountCategoryClient
	// OrganizationAccountType is the client for interacting with the OrganizationAccountType builders.
	OrganizationAccountType *OrganizationAccountTypeClient
	// OrganizationEventType is the client for interacting with the OrganizationEventType builders.
	OrganizationEventType *OrganizationEventTypeClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Event = NewEventClient(c.config)
	c.MasterAccount = NewMasterAccountClient(c.config)
	c.MasterAccountCategory = NewMasterAccountCategoryClient(c.config)
	c.MasterAccountType = NewMasterAccountTypeClient(c.config)
	c.MasterEventType = NewMasterEventTypeClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationAccount = NewOrganizationAccountClient(c.config)
	c.OrganizationAccountCategory = NewOrganizationAccountCategoryClient(c.config)
	c.OrganizationAccountType = NewOrganizationAccountTypeClient(c.config)
	c.OrganizationEventType = NewOrganizationEventTypeClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		Event:                       NewEventClient(cfg),
		MasterAccount:               NewMasterAccountClient(cfg),
		MasterAccountCategory:       NewMasterAccountCategoryClient(cfg),
		MasterAccountType:           NewMasterAccountTypeClient(cfg),
		MasterEventType:             NewMasterEventTypeClient(cfg),
		Organization:                NewOrganizationClient(cfg),
		OrganizationAccount:         NewOrganizationAccountClient(cfg),
		OrganizationAccountCategory: NewOrganizationAccountCategoryClient(cfg),
		OrganizationAccountType:     NewOrganizationAccountTypeClient(cfg),
		OrganizationEventType:       NewOrganizationEventTypeClient(cfg),
		Transaction:                 NewTransactionClient(cfg),
		User:                        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		Event:                       NewEventClient(cfg),
		MasterAccount:               NewMasterAccountClient(cfg),
		MasterAccountCategory:       NewMasterAccountCategoryClient(cfg),
		MasterAccountType:           NewMasterAccountTypeClient(cfg),
		MasterEventType:             NewMasterEventTypeClient(cfg),
		Organization:                NewOrganizationClient(cfg),
		OrganizationAccount:         NewOrganizationAccountClient(cfg),
		OrganizationAccountCategory: NewOrganizationAccountCategoryClient(cfg),
		OrganizationAccountType:     NewOrganizationAccountTypeClient(cfg),
		OrganizationEventType:       NewOrganizationEventTypeClient(cfg),
		Transaction:                 NewTransactionClient(cfg),
		User:                        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Event.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Event, c.MasterAccount, c.MasterAccountCategory, c.MasterAccountType,
		c.MasterEventType, c.Organization, c.OrganizationAccount,
		c.OrganizationAccountCategory, c.OrganizationAccountType,
		c.OrganizationEventType, c.Transaction, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Event, c.MasterAccount, c.MasterAccountCategory, c.MasterAccountType,
		c.MasterEventType, c.Organization, c.OrganizationAccount,
		c.OrganizationAccountCategory, c.OrganizationAccountType,
		c.OrganizationEventType, c.Transaction, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *MasterAccountMutation:
		return c.MasterAccount.mutate(ctx, m)
	case *MasterAccountCategoryMutation:
		return c.MasterAccountCategory.mutate(ctx, m)
	case *MasterAccountTypeMutation:
		return c.MasterAccountType.mutate(ctx, m)
	case *MasterEventTypeMutation:
		return c.MasterEventType.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationAccountMutation:
		return c.OrganizationAccount.mutate(ctx, m)
	case *OrganizationAccountCategoryMutation:
		return c.OrganizationAccountCategory.mutate(ctx, m)
	case *OrganizationAccountTypeMutation:
		return c.OrganizationAccountType.mutate(ctx, m)
	case *OrganizationEventTypeMutation:
		return c.OrganizationEventType.mutate(ctx, m)
	case *TransactionMutation:
		return c.Transaction.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uuid.UUID) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uuid.UUID) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uuid.UUID) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uuid.UUID) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactions queries the transactions edge of a Event.
func (c *EventClient) QueryTransactions(e *Event) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.TransactionsTable, event.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Event.
func (c *EventClient) QueryType(e *Event) *OrganizationEventTypeQuery {
	query := (&OrganizationEventTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(organizationeventtype.Table, organizationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.TypeTable, event.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Event.
func (c *EventClient) QueryOrganization(e *Event) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.OrganizationTable, event.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	return c.inters.Event
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Event mutation op: %q", m.Op())
	}
}

// MasterAccountClient is a client for the MasterAccount schema.
type MasterAccountClient struct {
	config
}

// NewMasterAccountClient returns a client for the MasterAccount from the given config.
func NewMasterAccountClient(c config) *MasterAccountClient {
	return &MasterAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `masteraccount.Hooks(f(g(h())))`.
func (c *MasterAccountClient) Use(hooks ...Hook) {
	c.hooks.MasterAccount = append(c.hooks.MasterAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `masteraccount.Intercept(f(g(h())))`.
func (c *MasterAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.MasterAccount = append(c.inters.MasterAccount, interceptors...)
}

// Create returns a builder for creating a MasterAccount entity.
func (c *MasterAccountClient) Create() *MasterAccountCreate {
	mutation := newMasterAccountMutation(c.config, OpCreate)
	return &MasterAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MasterAccount entities.
func (c *MasterAccountClient) CreateBulk(builders ...*MasterAccountCreate) *MasterAccountCreateBulk {
	return &MasterAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MasterAccount.
func (c *MasterAccountClient) Update() *MasterAccountUpdate {
	mutation := newMasterAccountMutation(c.config, OpUpdate)
	return &MasterAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MasterAccountClient) UpdateOne(ma *MasterAccount) *MasterAccountUpdateOne {
	mutation := newMasterAccountMutation(c.config, OpUpdateOne, withMasterAccount(ma))
	return &MasterAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MasterAccountClient) UpdateOneID(id int) *MasterAccountUpdateOne {
	mutation := newMasterAccountMutation(c.config, OpUpdateOne, withMasterAccountID(id))
	return &MasterAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MasterAccount.
func (c *MasterAccountClient) Delete() *MasterAccountDelete {
	mutation := newMasterAccountMutation(c.config, OpDelete)
	return &MasterAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MasterAccountClient) DeleteOne(ma *MasterAccount) *MasterAccountDeleteOne {
	return c.DeleteOneID(ma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MasterAccountClient) DeleteOneID(id int) *MasterAccountDeleteOne {
	builder := c.Delete().Where(masteraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MasterAccountDeleteOne{builder}
}

// Query returns a query builder for MasterAccount.
func (c *MasterAccountClient) Query() *MasterAccountQuery {
	return &MasterAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMasterAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a MasterAccount entity by its id.
func (c *MasterAccountClient) Get(ctx context.Context, id int) (*MasterAccount, error) {
	return c.Query().Where(masteraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MasterAccountClient) GetX(ctx context.Context, id int) *MasterAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccCategory queries the accCategory edge of a MasterAccount.
func (c *MasterAccountClient) QueryAccCategory(ma *MasterAccount) *MasterAccountCategoryQuery {
	query := (&MasterAccountCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccount.Table, masteraccount.FieldID, id),
			sqlgraph.To(masteraccountcategory.Table, masteraccountcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, masteraccount.AccCategoryTable, masteraccount.AccCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MasterAccountClient) Hooks() []Hook {
	return c.hooks.MasterAccount
}

// Interceptors returns the client interceptors.
func (c *MasterAccountClient) Interceptors() []Interceptor {
	return c.inters.MasterAccount
}

func (c *MasterAccountClient) mutate(ctx context.Context, m *MasterAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MasterAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MasterAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MasterAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MasterAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MasterAccount mutation op: %q", m.Op())
	}
}

// MasterAccountCategoryClient is a client for the MasterAccountCategory schema.
type MasterAccountCategoryClient struct {
	config
}

// NewMasterAccountCategoryClient returns a client for the MasterAccountCategory from the given config.
func NewMasterAccountCategoryClient(c config) *MasterAccountCategoryClient {
	return &MasterAccountCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `masteraccountcategory.Hooks(f(g(h())))`.
func (c *MasterAccountCategoryClient) Use(hooks ...Hook) {
	c.hooks.MasterAccountCategory = append(c.hooks.MasterAccountCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `masteraccountcategory.Intercept(f(g(h())))`.
func (c *MasterAccountCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.MasterAccountCategory = append(c.inters.MasterAccountCategory, interceptors...)
}

// Create returns a builder for creating a MasterAccountCategory entity.
func (c *MasterAccountCategoryClient) Create() *MasterAccountCategoryCreate {
	mutation := newMasterAccountCategoryMutation(c.config, OpCreate)
	return &MasterAccountCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MasterAccountCategory entities.
func (c *MasterAccountCategoryClient) CreateBulk(builders ...*MasterAccountCategoryCreate) *MasterAccountCategoryCreateBulk {
	return &MasterAccountCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MasterAccountCategory.
func (c *MasterAccountCategoryClient) Update() *MasterAccountCategoryUpdate {
	mutation := newMasterAccountCategoryMutation(c.config, OpUpdate)
	return &MasterAccountCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MasterAccountCategoryClient) UpdateOne(mac *MasterAccountCategory) *MasterAccountCategoryUpdateOne {
	mutation := newMasterAccountCategoryMutation(c.config, OpUpdateOne, withMasterAccountCategory(mac))
	return &MasterAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MasterAccountCategoryClient) UpdateOneID(id int) *MasterAccountCategoryUpdateOne {
	mutation := newMasterAccountCategoryMutation(c.config, OpUpdateOne, withMasterAccountCategoryID(id))
	return &MasterAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MasterAccountCategory.
func (c *MasterAccountCategoryClient) Delete() *MasterAccountCategoryDelete {
	mutation := newMasterAccountCategoryMutation(c.config, OpDelete)
	return &MasterAccountCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MasterAccountCategoryClient) DeleteOne(mac *MasterAccountCategory) *MasterAccountCategoryDeleteOne {
	return c.DeleteOneID(mac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MasterAccountCategoryClient) DeleteOneID(id int) *MasterAccountCategoryDeleteOne {
	builder := c.Delete().Where(masteraccountcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MasterAccountCategoryDeleteOne{builder}
}

// Query returns a query builder for MasterAccountCategory.
func (c *MasterAccountCategoryClient) Query() *MasterAccountCategoryQuery {
	return &MasterAccountCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMasterAccountCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a MasterAccountCategory entity by its id.
func (c *MasterAccountCategoryClient) Get(ctx context.Context, id int) (*MasterAccountCategory, error) {
	return c.Query().Where(masteraccountcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MasterAccountCategoryClient) GetX(ctx context.Context, id int) *MasterAccountCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a MasterAccountCategory.
func (c *MasterAccountCategoryClient) QueryAccounts(mac *MasterAccountCategory) *MasterAccountQuery {
	query := (&MasterAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccountcategory.Table, masteraccountcategory.FieldID, id),
			sqlgraph.To(masteraccount.Table, masteraccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, masteraccountcategory.AccountsTable, masteraccountcategory.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(mac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccType queries the accType edge of a MasterAccountCategory.
func (c *MasterAccountCategoryClient) QueryAccType(mac *MasterAccountCategory) *MasterAccountTypeQuery {
	query := (&MasterAccountTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccountcategory.Table, masteraccountcategory.FieldID, id),
			sqlgraph.To(masteraccounttype.Table, masteraccounttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, masteraccountcategory.AccTypeTable, masteraccountcategory.AccTypeColumn),
		)
		fromV = sqlgraph.Neighbors(mac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MasterAccountCategoryClient) Hooks() []Hook {
	return c.hooks.MasterAccountCategory
}

// Interceptors returns the client interceptors.
func (c *MasterAccountCategoryClient) Interceptors() []Interceptor {
	return c.inters.MasterAccountCategory
}

func (c *MasterAccountCategoryClient) mutate(ctx context.Context, m *MasterAccountCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MasterAccountCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MasterAccountCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MasterAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MasterAccountCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MasterAccountCategory mutation op: %q", m.Op())
	}
}

// MasterAccountTypeClient is a client for the MasterAccountType schema.
type MasterAccountTypeClient struct {
	config
}

// NewMasterAccountTypeClient returns a client for the MasterAccountType from the given config.
func NewMasterAccountTypeClient(c config) *MasterAccountTypeClient {
	return &MasterAccountTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `masteraccounttype.Hooks(f(g(h())))`.
func (c *MasterAccountTypeClient) Use(hooks ...Hook) {
	c.hooks.MasterAccountType = append(c.hooks.MasterAccountType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `masteraccounttype.Intercept(f(g(h())))`.
func (c *MasterAccountTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.MasterAccountType = append(c.inters.MasterAccountType, interceptors...)
}

// Create returns a builder for creating a MasterAccountType entity.
func (c *MasterAccountTypeClient) Create() *MasterAccountTypeCreate {
	mutation := newMasterAccountTypeMutation(c.config, OpCreate)
	return &MasterAccountTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MasterAccountType entities.
func (c *MasterAccountTypeClient) CreateBulk(builders ...*MasterAccountTypeCreate) *MasterAccountTypeCreateBulk {
	return &MasterAccountTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MasterAccountType.
func (c *MasterAccountTypeClient) Update() *MasterAccountTypeUpdate {
	mutation := newMasterAccountTypeMutation(c.config, OpUpdate)
	return &MasterAccountTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MasterAccountTypeClient) UpdateOne(mat *MasterAccountType) *MasterAccountTypeUpdateOne {
	mutation := newMasterAccountTypeMutation(c.config, OpUpdateOne, withMasterAccountType(mat))
	return &MasterAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MasterAccountTypeClient) UpdateOneID(id int) *MasterAccountTypeUpdateOne {
	mutation := newMasterAccountTypeMutation(c.config, OpUpdateOne, withMasterAccountTypeID(id))
	return &MasterAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MasterAccountType.
func (c *MasterAccountTypeClient) Delete() *MasterAccountTypeDelete {
	mutation := newMasterAccountTypeMutation(c.config, OpDelete)
	return &MasterAccountTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MasterAccountTypeClient) DeleteOne(mat *MasterAccountType) *MasterAccountTypeDeleteOne {
	return c.DeleteOneID(mat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MasterAccountTypeClient) DeleteOneID(id int) *MasterAccountTypeDeleteOne {
	builder := c.Delete().Where(masteraccounttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MasterAccountTypeDeleteOne{builder}
}

// Query returns a query builder for MasterAccountType.
func (c *MasterAccountTypeClient) Query() *MasterAccountTypeQuery {
	return &MasterAccountTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMasterAccountType},
		inters: c.Interceptors(),
	}
}

// Get returns a MasterAccountType entity by its id.
func (c *MasterAccountTypeClient) Get(ctx context.Context, id int) (*MasterAccountType, error) {
	return c.Query().Where(masteraccounttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MasterAccountTypeClient) GetX(ctx context.Context, id int) *MasterAccountType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a MasterAccountType.
func (c *MasterAccountTypeClient) QueryCategories(mat *MasterAccountType) *MasterAccountCategoryQuery {
	query := (&MasterAccountCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccounttype.Table, masteraccounttype.FieldID, id),
			sqlgraph.To(masteraccountcategory.Table, masteraccountcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, masteraccounttype.CategoriesTable, masteraccounttype.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(mat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MasterAccountTypeClient) Hooks() []Hook {
	return c.hooks.MasterAccountType
}

// Interceptors returns the client interceptors.
func (c *MasterAccountTypeClient) Interceptors() []Interceptor {
	return c.inters.MasterAccountType
}

func (c *MasterAccountTypeClient) mutate(ctx context.Context, m *MasterAccountTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MasterAccountTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MasterAccountTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MasterAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MasterAccountTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MasterAccountType mutation op: %q", m.Op())
	}
}

// MasterEventTypeClient is a client for the MasterEventType schema.
type MasterEventTypeClient struct {
	config
}

// NewMasterEventTypeClient returns a client for the MasterEventType from the given config.
func NewMasterEventTypeClient(c config) *MasterEventTypeClient {
	return &MasterEventTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mastereventtype.Hooks(f(g(h())))`.
func (c *MasterEventTypeClient) Use(hooks ...Hook) {
	c.hooks.MasterEventType = append(c.hooks.MasterEventType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mastereventtype.Intercept(f(g(h())))`.
func (c *MasterEventTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.MasterEventType = append(c.inters.MasterEventType, interceptors...)
}

// Create returns a builder for creating a MasterEventType entity.
func (c *MasterEventTypeClient) Create() *MasterEventTypeCreate {
	mutation := newMasterEventTypeMutation(c.config, OpCreate)
	return &MasterEventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MasterEventType entities.
func (c *MasterEventTypeClient) CreateBulk(builders ...*MasterEventTypeCreate) *MasterEventTypeCreateBulk {
	return &MasterEventTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MasterEventType.
func (c *MasterEventTypeClient) Update() *MasterEventTypeUpdate {
	mutation := newMasterEventTypeMutation(c.config, OpUpdate)
	return &MasterEventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MasterEventTypeClient) UpdateOne(met *MasterEventType) *MasterEventTypeUpdateOne {
	mutation := newMasterEventTypeMutation(c.config, OpUpdateOne, withMasterEventType(met))
	return &MasterEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MasterEventTypeClient) UpdateOneID(id int) *MasterEventTypeUpdateOne {
	mutation := newMasterEventTypeMutation(c.config, OpUpdateOne, withMasterEventTypeID(id))
	return &MasterEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MasterEventType.
func (c *MasterEventTypeClient) Delete() *MasterEventTypeDelete {
	mutation := newMasterEventTypeMutation(c.config, OpDelete)
	return &MasterEventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MasterEventTypeClient) DeleteOne(met *MasterEventType) *MasterEventTypeDeleteOne {
	return c.DeleteOneID(met.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MasterEventTypeClient) DeleteOneID(id int) *MasterEventTypeDeleteOne {
	builder := c.Delete().Where(mastereventtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MasterEventTypeDeleteOne{builder}
}

// Query returns a query builder for MasterEventType.
func (c *MasterEventTypeClient) Query() *MasterEventTypeQuery {
	return &MasterEventTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMasterEventType},
		inters: c.Interceptors(),
	}
}

// Get returns a MasterEventType entity by its id.
func (c *MasterEventTypeClient) Get(ctx context.Context, id int) (*MasterEventType, error) {
	return c.Query().Where(mastereventtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MasterEventTypeClient) GetX(ctx context.Context, id int) *MasterEventType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MasterEventTypeClient) Hooks() []Hook {
	return c.hooks.MasterEventType
}

// Interceptors returns the client interceptors.
func (c *MasterEventTypeClient) Interceptors() []Interceptor {
	return c.inters.MasterEventType
}

func (c *MasterEventTypeClient) mutate(ctx context.Context, m *MasterEventTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MasterEventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MasterEventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MasterEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MasterEventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MasterEventType mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id uuid.UUID) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id uuid.UUID) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id uuid.UUID) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id uuid.UUID) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Organization.
func (c *OrganizationClient) QueryUsers(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.UsersTable, organization.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountTypes queries the accountTypes edge of a Organization.
func (c *OrganizationClient) QueryAccountTypes(o *Organization) *OrganizationAccountTypeQuery {
	query := (&OrganizationAccountTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationaccounttype.Table, organizationaccounttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.AccountTypesTable, organization.AccountTypesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventTypes queries the eventTypes edge of a Organization.
func (c *OrganizationClient) QueryEventTypes(o *Organization) *OrganizationEventTypeQuery {
	query := (&OrganizationEventTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationeventtype.Table, organizationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EventTypesTable, organization.EventTypesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a Organization.
func (c *OrganizationClient) QueryEvents(o *Organization) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EventsTable, organization.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationAccountClient is a client for the OrganizationAccount schema.
type OrganizationAccountClient struct {
	config
}

// NewOrganizationAccountClient returns a client for the OrganizationAccount from the given config.
func NewOrganizationAccountClient(c config) *OrganizationAccountClient {
	return &OrganizationAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationaccount.Hooks(f(g(h())))`.
func (c *OrganizationAccountClient) Use(hooks ...Hook) {
	c.hooks.OrganizationAccount = append(c.hooks.OrganizationAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationaccount.Intercept(f(g(h())))`.
func (c *OrganizationAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationAccount = append(c.inters.OrganizationAccount, interceptors...)
}

// Create returns a builder for creating a OrganizationAccount entity.
func (c *OrganizationAccountClient) Create() *OrganizationAccountCreate {
	mutation := newOrganizationAccountMutation(c.config, OpCreate)
	return &OrganizationAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationAccount entities.
func (c *OrganizationAccountClient) CreateBulk(builders ...*OrganizationAccountCreate) *OrganizationAccountCreateBulk {
	return &OrganizationAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationAccount.
func (c *OrganizationAccountClient) Update() *OrganizationAccountUpdate {
	mutation := newOrganizationAccountMutation(c.config, OpUpdate)
	return &OrganizationAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationAccountClient) UpdateOne(oa *OrganizationAccount) *OrganizationAccountUpdateOne {
	mutation := newOrganizationAccountMutation(c.config, OpUpdateOne, withOrganizationAccount(oa))
	return &OrganizationAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationAccountClient) UpdateOneID(id int) *OrganizationAccountUpdateOne {
	mutation := newOrganizationAccountMutation(c.config, OpUpdateOne, withOrganizationAccountID(id))
	return &OrganizationAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationAccount.
func (c *OrganizationAccountClient) Delete() *OrganizationAccountDelete {
	mutation := newOrganizationAccountMutation(c.config, OpDelete)
	return &OrganizationAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationAccountClient) DeleteOne(oa *OrganizationAccount) *OrganizationAccountDeleteOne {
	return c.DeleteOneID(oa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationAccountClient) DeleteOneID(id int) *OrganizationAccountDeleteOne {
	builder := c.Delete().Where(organizationaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationAccountDeleteOne{builder}
}

// Query returns a query builder for OrganizationAccount.
func (c *OrganizationAccountClient) Query() *OrganizationAccountQuery {
	return &OrganizationAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationAccount entity by its id.
func (c *OrganizationAccountClient) Get(ctx context.Context, id int) (*OrganizationAccount, error) {
	return c.Query().Where(organizationaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationAccountClient) GetX(ctx context.Context, id int) *OrganizationAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactions queries the transactions edge of a OrganizationAccount.
func (c *OrganizationAccountClient) QueryTransactions(oa *OrganizationAccount) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccount.Table, organizationaccount.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationaccount.TransactionsTable, organizationaccount.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccCategory queries the accCategory edge of a OrganizationAccount.
func (c *OrganizationAccountClient) QueryAccCategory(oa *OrganizationAccount) *OrganizationAccountCategoryQuery {
	query := (&OrganizationAccountCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccount.Table, organizationaccount.FieldID, id),
			sqlgraph.To(organizationaccountcategory.Table, organizationaccountcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationaccount.AccCategoryTable, organizationaccount.AccCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationAccountClient) Hooks() []Hook {
	return c.hooks.OrganizationAccount
}

// Interceptors returns the client interceptors.
func (c *OrganizationAccountClient) Interceptors() []Interceptor {
	return c.inters.OrganizationAccount
}

func (c *OrganizationAccountClient) mutate(ctx context.Context, m *OrganizationAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationAccount mutation op: %q", m.Op())
	}
}

// OrganizationAccountCategoryClient is a client for the OrganizationAccountCategory schema.
type OrganizationAccountCategoryClient struct {
	config
}

// NewOrganizationAccountCategoryClient returns a client for the OrganizationAccountCategory from the given config.
func NewOrganizationAccountCategoryClient(c config) *OrganizationAccountCategoryClient {
	return &OrganizationAccountCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationaccountcategory.Hooks(f(g(h())))`.
func (c *OrganizationAccountCategoryClient) Use(hooks ...Hook) {
	c.hooks.OrganizationAccountCategory = append(c.hooks.OrganizationAccountCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationaccountcategory.Intercept(f(g(h())))`.
func (c *OrganizationAccountCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationAccountCategory = append(c.inters.OrganizationAccountCategory, interceptors...)
}

// Create returns a builder for creating a OrganizationAccountCategory entity.
func (c *OrganizationAccountCategoryClient) Create() *OrganizationAccountCategoryCreate {
	mutation := newOrganizationAccountCategoryMutation(c.config, OpCreate)
	return &OrganizationAccountCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationAccountCategory entities.
func (c *OrganizationAccountCategoryClient) CreateBulk(builders ...*OrganizationAccountCategoryCreate) *OrganizationAccountCategoryCreateBulk {
	return &OrganizationAccountCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationAccountCategory.
func (c *OrganizationAccountCategoryClient) Update() *OrganizationAccountCategoryUpdate {
	mutation := newOrganizationAccountCategoryMutation(c.config, OpUpdate)
	return &OrganizationAccountCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationAccountCategoryClient) UpdateOne(oac *OrganizationAccountCategory) *OrganizationAccountCategoryUpdateOne {
	mutation := newOrganizationAccountCategoryMutation(c.config, OpUpdateOne, withOrganizationAccountCategory(oac))
	return &OrganizationAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationAccountCategoryClient) UpdateOneID(id int) *OrganizationAccountCategoryUpdateOne {
	mutation := newOrganizationAccountCategoryMutation(c.config, OpUpdateOne, withOrganizationAccountCategoryID(id))
	return &OrganizationAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationAccountCategory.
func (c *OrganizationAccountCategoryClient) Delete() *OrganizationAccountCategoryDelete {
	mutation := newOrganizationAccountCategoryMutation(c.config, OpDelete)
	return &OrganizationAccountCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationAccountCategoryClient) DeleteOne(oac *OrganizationAccountCategory) *OrganizationAccountCategoryDeleteOne {
	return c.DeleteOneID(oac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationAccountCategoryClient) DeleteOneID(id int) *OrganizationAccountCategoryDeleteOne {
	builder := c.Delete().Where(organizationaccountcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationAccountCategoryDeleteOne{builder}
}

// Query returns a query builder for OrganizationAccountCategory.
func (c *OrganizationAccountCategoryClient) Query() *OrganizationAccountCategoryQuery {
	return &OrganizationAccountCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationAccountCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationAccountCategory entity by its id.
func (c *OrganizationAccountCategoryClient) Get(ctx context.Context, id int) (*OrganizationAccountCategory, error) {
	return c.Query().Where(organizationaccountcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationAccountCategoryClient) GetX(ctx context.Context, id int) *OrganizationAccountCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a OrganizationAccountCategory.
func (c *OrganizationAccountCategoryClient) QueryAccounts(oac *OrganizationAccountCategory) *OrganizationAccountQuery {
	query := (&OrganizationAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccountcategory.Table, organizationaccountcategory.FieldID, id),
			sqlgraph.To(organizationaccount.Table, organizationaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationaccountcategory.AccountsTable, organizationaccountcategory.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a OrganizationAccountCategory.
func (c *OrganizationAccountCategoryClient) QueryType(oac *OrganizationAccountCategory) *OrganizationAccountTypeQuery {
	query := (&OrganizationAccountTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccountcategory.Table, organizationaccountcategory.FieldID, id),
			sqlgraph.To(organizationaccounttype.Table, organizationaccounttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationaccountcategory.TypeTable, organizationaccountcategory.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationAccountCategoryClient) Hooks() []Hook {
	return c.hooks.OrganizationAccountCategory
}

// Interceptors returns the client interceptors.
func (c *OrganizationAccountCategoryClient) Interceptors() []Interceptor {
	return c.inters.OrganizationAccountCategory
}

func (c *OrganizationAccountCategoryClient) mutate(ctx context.Context, m *OrganizationAccountCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationAccountCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationAccountCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationAccountCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationAccountCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationAccountCategory mutation op: %q", m.Op())
	}
}

// OrganizationAccountTypeClient is a client for the OrganizationAccountType schema.
type OrganizationAccountTypeClient struct {
	config
}

// NewOrganizationAccountTypeClient returns a client for the OrganizationAccountType from the given config.
func NewOrganizationAccountTypeClient(c config) *OrganizationAccountTypeClient {
	return &OrganizationAccountTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationaccounttype.Hooks(f(g(h())))`.
func (c *OrganizationAccountTypeClient) Use(hooks ...Hook) {
	c.hooks.OrganizationAccountType = append(c.hooks.OrganizationAccountType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationaccounttype.Intercept(f(g(h())))`.
func (c *OrganizationAccountTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationAccountType = append(c.inters.OrganizationAccountType, interceptors...)
}

// Create returns a builder for creating a OrganizationAccountType entity.
func (c *OrganizationAccountTypeClient) Create() *OrganizationAccountTypeCreate {
	mutation := newOrganizationAccountTypeMutation(c.config, OpCreate)
	return &OrganizationAccountTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationAccountType entities.
func (c *OrganizationAccountTypeClient) CreateBulk(builders ...*OrganizationAccountTypeCreate) *OrganizationAccountTypeCreateBulk {
	return &OrganizationAccountTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationAccountType.
func (c *OrganizationAccountTypeClient) Update() *OrganizationAccountTypeUpdate {
	mutation := newOrganizationAccountTypeMutation(c.config, OpUpdate)
	return &OrganizationAccountTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationAccountTypeClient) UpdateOne(oat *OrganizationAccountType) *OrganizationAccountTypeUpdateOne {
	mutation := newOrganizationAccountTypeMutation(c.config, OpUpdateOne, withOrganizationAccountType(oat))
	return &OrganizationAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationAccountTypeClient) UpdateOneID(id int) *OrganizationAccountTypeUpdateOne {
	mutation := newOrganizationAccountTypeMutation(c.config, OpUpdateOne, withOrganizationAccountTypeID(id))
	return &OrganizationAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationAccountType.
func (c *OrganizationAccountTypeClient) Delete() *OrganizationAccountTypeDelete {
	mutation := newOrganizationAccountTypeMutation(c.config, OpDelete)
	return &OrganizationAccountTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationAccountTypeClient) DeleteOne(oat *OrganizationAccountType) *OrganizationAccountTypeDeleteOne {
	return c.DeleteOneID(oat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationAccountTypeClient) DeleteOneID(id int) *OrganizationAccountTypeDeleteOne {
	builder := c.Delete().Where(organizationaccounttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationAccountTypeDeleteOne{builder}
}

// Query returns a query builder for OrganizationAccountType.
func (c *OrganizationAccountTypeClient) Query() *OrganizationAccountTypeQuery {
	return &OrganizationAccountTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationAccountType},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationAccountType entity by its id.
func (c *OrganizationAccountTypeClient) Get(ctx context.Context, id int) (*OrganizationAccountType, error) {
	return c.Query().Where(organizationaccounttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationAccountTypeClient) GetX(ctx context.Context, id int) *OrganizationAccountType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a OrganizationAccountType.
func (c *OrganizationAccountTypeClient) QueryCategories(oat *OrganizationAccountType) *OrganizationAccountCategoryQuery {
	query := (&OrganizationAccountCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccounttype.Table, organizationaccounttype.FieldID, id),
			sqlgraph.To(organizationaccountcategory.Table, organizationaccountcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationaccounttype.CategoriesTable, organizationaccounttype.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(oat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a OrganizationAccountType.
func (c *OrganizationAccountTypeClient) QueryOrganization(oat *OrganizationAccountType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationaccounttype.Table, organizationaccounttype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationaccounttype.OrganizationTable, organizationaccounttype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(oat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationAccountTypeClient) Hooks() []Hook {
	return c.hooks.OrganizationAccountType
}

// Interceptors returns the client interceptors.
func (c *OrganizationAccountTypeClient) Interceptors() []Interceptor {
	return c.inters.OrganizationAccountType
}

func (c *OrganizationAccountTypeClient) mutate(ctx context.Context, m *OrganizationAccountTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationAccountTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationAccountTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationAccountTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationAccountTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationAccountType mutation op: %q", m.Op())
	}
}

// OrganizationEventTypeClient is a client for the OrganizationEventType schema.
type OrganizationEventTypeClient struct {
	config
}

// NewOrganizationEventTypeClient returns a client for the OrganizationEventType from the given config.
func NewOrganizationEventTypeClient(c config) *OrganizationEventTypeClient {
	return &OrganizationEventTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationeventtype.Hooks(f(g(h())))`.
func (c *OrganizationEventTypeClient) Use(hooks ...Hook) {
	c.hooks.OrganizationEventType = append(c.hooks.OrganizationEventType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationeventtype.Intercept(f(g(h())))`.
func (c *OrganizationEventTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationEventType = append(c.inters.OrganizationEventType, interceptors...)
}

// Create returns a builder for creating a OrganizationEventType entity.
func (c *OrganizationEventTypeClient) Create() *OrganizationEventTypeCreate {
	mutation := newOrganizationEventTypeMutation(c.config, OpCreate)
	return &OrganizationEventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationEventType entities.
func (c *OrganizationEventTypeClient) CreateBulk(builders ...*OrganizationEventTypeCreate) *OrganizationEventTypeCreateBulk {
	return &OrganizationEventTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationEventType.
func (c *OrganizationEventTypeClient) Update() *OrganizationEventTypeUpdate {
	mutation := newOrganizationEventTypeMutation(c.config, OpUpdate)
	return &OrganizationEventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationEventTypeClient) UpdateOne(oet *OrganizationEventType) *OrganizationEventTypeUpdateOne {
	mutation := newOrganizationEventTypeMutation(c.config, OpUpdateOne, withOrganizationEventType(oet))
	return &OrganizationEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationEventTypeClient) UpdateOneID(id int) *OrganizationEventTypeUpdateOne {
	mutation := newOrganizationEventTypeMutation(c.config, OpUpdateOne, withOrganizationEventTypeID(id))
	return &OrganizationEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationEventType.
func (c *OrganizationEventTypeClient) Delete() *OrganizationEventTypeDelete {
	mutation := newOrganizationEventTypeMutation(c.config, OpDelete)
	return &OrganizationEventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationEventTypeClient) DeleteOne(oet *OrganizationEventType) *OrganizationEventTypeDeleteOne {
	return c.DeleteOneID(oet.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationEventTypeClient) DeleteOneID(id int) *OrganizationEventTypeDeleteOne {
	builder := c.Delete().Where(organizationeventtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationEventTypeDeleteOne{builder}
}

// Query returns a query builder for OrganizationEventType.
func (c *OrganizationEventTypeClient) Query() *OrganizationEventTypeQuery {
	return &OrganizationEventTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationEventType},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationEventType entity by its id.
func (c *OrganizationEventTypeClient) Get(ctx context.Context, id int) (*OrganizationEventType, error) {
	return c.Query().Where(organizationeventtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationEventTypeClient) GetX(ctx context.Context, id int) *OrganizationEventType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a OrganizationEventType.
func (c *OrganizationEventTypeClient) QueryEvents(oet *OrganizationEventType) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationeventtype.Table, organizationeventtype.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationeventtype.EventsTable, organizationeventtype.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(oet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a OrganizationEventType.
func (c *OrganizationEventTypeClient) QueryOrganization(oet *OrganizationEventType) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationeventtype.Table, organizationeventtype.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationeventtype.OrganizationTable, organizationeventtype.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(oet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationEventTypeClient) Hooks() []Hook {
	return c.hooks.OrganizationEventType
}

// Interceptors returns the client interceptors.
func (c *OrganizationEventTypeClient) Interceptors() []Interceptor {
	return c.inters.OrganizationEventType
}

func (c *OrganizationEventTypeClient) mutate(ctx context.Context, m *OrganizationEventTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationEventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationEventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationEventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationEventType mutation op: %q", m.Op())
	}
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transaction.Intercept(f(g(h())))`.
func (c *TransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transaction = append(c.inters.Transaction, interceptors...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id uuid.UUID) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id uuid.UUID) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id uuid.UUID) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id uuid.UUID) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccount queries the account edge of a Transaction.
func (c *TransactionClient) QueryAccount(t *Transaction) *OrganizationAccountQuery {
	query := (&OrganizationAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(organizationaccount.Table, organizationaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.AccountTable, transaction.AccountColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvent queries the event edge of a Transaction.
func (c *TransactionClient) QueryEvent(t *Transaction) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.EventTable, transaction.EventColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}

// Interceptors returns the client interceptors.
func (c *TransactionClient) Interceptors() []Interceptor {
	return c.inters.Transaction
}

func (c *TransactionClient) mutate(ctx context.Context, m *TransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transaction mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizations queries the organizations edge of a User.
func (c *UserClient) QueryOrganizations(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.OrganizationsTable, user.OrganizationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Event, MasterAccount, MasterAccountCategory, MasterAccountType, MasterEventType,
		Organization, OrganizationAccount, OrganizationAccountCategory,
		OrganizationAccountType, OrganizationEventType, Transaction, User []ent.Hook
	}
	inters struct {
		Event, MasterAccount, MasterAccountCategory, MasterAccountType, MasterEventType,
		Organization, OrganizationAccount, OrganizationAccountCategory,
		OrganizationAccountType, OrganizationEventType, Transaction,
		User []ent.Interceptor
	}
)
