// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountCategoryQuery is the builder for querying MasterAccountCategory entities.
type MasterAccountCategoryQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.MasterAccountCategory
	withAccounts *MasterAccountQuery
	withAccType  *MasterAccountTypeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MasterAccountCategoryQuery builder.
func (macq *MasterAccountCategoryQuery) Where(ps ...predicate.MasterAccountCategory) *MasterAccountCategoryQuery {
	macq.predicates = append(macq.predicates, ps...)
	return macq
}

// Limit the number of records to be returned by this query.
func (macq *MasterAccountCategoryQuery) Limit(limit int) *MasterAccountCategoryQuery {
	macq.ctx.Limit = &limit
	return macq
}

// Offset to start from.
func (macq *MasterAccountCategoryQuery) Offset(offset int) *MasterAccountCategoryQuery {
	macq.ctx.Offset = &offset
	return macq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (macq *MasterAccountCategoryQuery) Unique(unique bool) *MasterAccountCategoryQuery {
	macq.ctx.Unique = &unique
	return macq
}

// Order specifies how the records should be ordered.
func (macq *MasterAccountCategoryQuery) Order(o ...OrderFunc) *MasterAccountCategoryQuery {
	macq.order = append(macq.order, o...)
	return macq
}

// QueryAccounts chains the current query on the "accounts" edge.
func (macq *MasterAccountCategoryQuery) QueryAccounts() *MasterAccountQuery {
	query := (&MasterAccountClient{config: macq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := macq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := macq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccountcategory.Table, masteraccountcategory.FieldID, selector),
			sqlgraph.To(masteraccount.Table, masteraccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, masteraccountcategory.AccountsTable, masteraccountcategory.AccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(macq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccType chains the current query on the "accType" edge.
func (macq *MasterAccountCategoryQuery) QueryAccType() *MasterAccountTypeQuery {
	query := (&MasterAccountTypeClient{config: macq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := macq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := macq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(masteraccountcategory.Table, masteraccountcategory.FieldID, selector),
			sqlgraph.To(masteraccounttype.Table, masteraccounttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, masteraccountcategory.AccTypeTable, masteraccountcategory.AccTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(macq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MasterAccountCategory entity from the query.
// Returns a *NotFoundError when no MasterAccountCategory was found.
func (macq *MasterAccountCategoryQuery) First(ctx context.Context) (*MasterAccountCategory, error) {
	nodes, err := macq.Limit(1).All(setContextOp(ctx, macq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{masteraccountcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) FirstX(ctx context.Context) *MasterAccountCategory {
	node, err := macq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MasterAccountCategory ID from the query.
// Returns a *NotFoundError when no MasterAccountCategory ID was found.
func (macq *MasterAccountCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = macq.Limit(1).IDs(setContextOp(ctx, macq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{masteraccountcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := macq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MasterAccountCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MasterAccountCategory entity is found.
// Returns a *NotFoundError when no MasterAccountCategory entities are found.
func (macq *MasterAccountCategoryQuery) Only(ctx context.Context) (*MasterAccountCategory, error) {
	nodes, err := macq.Limit(2).All(setContextOp(ctx, macq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{masteraccountcategory.Label}
	default:
		return nil, &NotSingularError{masteraccountcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) OnlyX(ctx context.Context) *MasterAccountCategory {
	node, err := macq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MasterAccountCategory ID in the query.
// Returns a *NotSingularError when more than one MasterAccountCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (macq *MasterAccountCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = macq.Limit(2).IDs(setContextOp(ctx, macq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{masteraccountcategory.Label}
	default:
		err = &NotSingularError{masteraccountcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := macq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MasterAccountCategories.
func (macq *MasterAccountCategoryQuery) All(ctx context.Context) ([]*MasterAccountCategory, error) {
	ctx = setContextOp(ctx, macq.ctx, "All")
	if err := macq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MasterAccountCategory, *MasterAccountCategoryQuery]()
	return withInterceptors[[]*MasterAccountCategory](ctx, macq, qr, macq.inters)
}

// AllX is like All, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) AllX(ctx context.Context) []*MasterAccountCategory {
	nodes, err := macq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MasterAccountCategory IDs.
func (macq *MasterAccountCategoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if macq.ctx.Unique == nil && macq.path != nil {
		macq.Unique(true)
	}
	ctx = setContextOp(ctx, macq.ctx, "IDs")
	if err = macq.Select(masteraccountcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := macq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (macq *MasterAccountCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, macq.ctx, "Count")
	if err := macq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, macq, querierCount[*MasterAccountCategoryQuery](), macq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) CountX(ctx context.Context) int {
	count, err := macq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (macq *MasterAccountCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, macq.ctx, "Exist")
	switch _, err := macq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (macq *MasterAccountCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := macq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MasterAccountCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (macq *MasterAccountCategoryQuery) Clone() *MasterAccountCategoryQuery {
	if macq == nil {
		return nil
	}
	return &MasterAccountCategoryQuery{
		config:       macq.config,
		ctx:          macq.ctx.Clone(),
		order:        append([]OrderFunc{}, macq.order...),
		inters:       append([]Interceptor{}, macq.inters...),
		predicates:   append([]predicate.MasterAccountCategory{}, macq.predicates...),
		withAccounts: macq.withAccounts.Clone(),
		withAccType:  macq.withAccType.Clone(),
		// clone intermediate query.
		sql:  macq.sql.Clone(),
		path: macq.path,
	}
}

// WithAccounts tells the query-builder to eager-load the nodes that are connected to
// the "accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (macq *MasterAccountCategoryQuery) WithAccounts(opts ...func(*MasterAccountQuery)) *MasterAccountCategoryQuery {
	query := (&MasterAccountClient{config: macq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	macq.withAccounts = query
	return macq
}

// WithAccType tells the query-builder to eager-load the nodes that are connected to
// the "accType" edge. The optional arguments are used to configure the query builder of the edge.
func (macq *MasterAccountCategoryQuery) WithAccType(opts ...func(*MasterAccountTypeQuery)) *MasterAccountCategoryQuery {
	query := (&MasterAccountTypeClient{config: macq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	macq.withAccType = query
	return macq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountTypeID int `json:"account_type_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MasterAccountCategory.Query().
//		GroupBy(masteraccountcategory.FieldAccountTypeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (macq *MasterAccountCategoryQuery) GroupBy(field string, fields ...string) *MasterAccountCategoryGroupBy {
	macq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MasterAccountCategoryGroupBy{build: macq}
	grbuild.flds = &macq.ctx.Fields
	grbuild.label = masteraccountcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountTypeID int `json:"account_type_id,omitempty"`
//	}
//
//	client.MasterAccountCategory.Query().
//		Select(masteraccountcategory.FieldAccountTypeID).
//		Scan(ctx, &v)
func (macq *MasterAccountCategoryQuery) Select(fields ...string) *MasterAccountCategorySelect {
	macq.ctx.Fields = append(macq.ctx.Fields, fields...)
	sbuild := &MasterAccountCategorySelect{MasterAccountCategoryQuery: macq}
	sbuild.label = masteraccountcategory.Label
	sbuild.flds, sbuild.scan = &macq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MasterAccountCategorySelect configured with the given aggregations.
func (macq *MasterAccountCategoryQuery) Aggregate(fns ...AggregateFunc) *MasterAccountCategorySelect {
	return macq.Select().Aggregate(fns...)
}

func (macq *MasterAccountCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range macq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, macq); err != nil {
				return err
			}
		}
	}
	for _, f := range macq.ctx.Fields {
		if !masteraccountcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if macq.path != nil {
		prev, err := macq.path(ctx)
		if err != nil {
			return err
		}
		macq.sql = prev
	}
	return nil
}

func (macq *MasterAccountCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MasterAccountCategory, error) {
	var (
		nodes       = []*MasterAccountCategory{}
		_spec       = macq.querySpec()
		loadedTypes = [2]bool{
			macq.withAccounts != nil,
			macq.withAccType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MasterAccountCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MasterAccountCategory{config: macq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, macq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := macq.withAccounts; query != nil {
		if err := macq.loadAccounts(ctx, query, nodes,
			func(n *MasterAccountCategory) { n.Edges.Accounts = []*MasterAccount{} },
			func(n *MasterAccountCategory, e *MasterAccount) { n.Edges.Accounts = append(n.Edges.Accounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := macq.withAccType; query != nil {
		if err := macq.loadAccType(ctx, query, nodes, nil,
			func(n *MasterAccountCategory, e *MasterAccountType) { n.Edges.AccType = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (macq *MasterAccountCategoryQuery) loadAccounts(ctx context.Context, query *MasterAccountQuery, nodes []*MasterAccountCategory, init func(*MasterAccountCategory), assign func(*MasterAccountCategory, *MasterAccount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MasterAccountCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.MasterAccount(func(s *sql.Selector) {
		s.Where(sql.InValues(masteraccountcategory.AccountsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (macq *MasterAccountCategoryQuery) loadAccType(ctx context.Context, query *MasterAccountTypeQuery, nodes []*MasterAccountCategory, init func(*MasterAccountCategory), assign func(*MasterAccountCategory, *MasterAccountType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MasterAccountCategory)
	for i := range nodes {
		fk := nodes[i].AccountTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(masteraccounttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (macq *MasterAccountCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := macq.querySpec()
	_spec.Node.Columns = macq.ctx.Fields
	if len(macq.ctx.Fields) > 0 {
		_spec.Unique = macq.ctx.Unique != nil && *macq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, macq.driver, _spec)
}

func (macq *MasterAccountCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(masteraccountcategory.Table, masteraccountcategory.Columns, sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt))
	_spec.From = macq.sql
	if unique := macq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if macq.path != nil {
		_spec.Unique = true
	}
	if fields := macq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, masteraccountcategory.FieldID)
		for i := range fields {
			if fields[i] != masteraccountcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := macq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := macq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := macq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := macq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (macq *MasterAccountCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(macq.driver.Dialect())
	t1 := builder.Table(masteraccountcategory.Table)
	columns := macq.ctx.Fields
	if len(columns) == 0 {
		columns = masteraccountcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if macq.sql != nil {
		selector = macq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if macq.ctx.Unique != nil && *macq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range macq.predicates {
		p(selector)
	}
	for _, p := range macq.order {
		p(selector)
	}
	if offset := macq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := macq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MasterAccountCategoryGroupBy is the group-by builder for MasterAccountCategory entities.
type MasterAccountCategoryGroupBy struct {
	selector
	build *MasterAccountCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (macgb *MasterAccountCategoryGroupBy) Aggregate(fns ...AggregateFunc) *MasterAccountCategoryGroupBy {
	macgb.fns = append(macgb.fns, fns...)
	return macgb
}

// Scan applies the selector query and scans the result into the given value.
func (macgb *MasterAccountCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, macgb.build.ctx, "GroupBy")
	if err := macgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MasterAccountCategoryQuery, *MasterAccountCategoryGroupBy](ctx, macgb.build, macgb, macgb.build.inters, v)
}

func (macgb *MasterAccountCategoryGroupBy) sqlScan(ctx context.Context, root *MasterAccountCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(macgb.fns))
	for _, fn := range macgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*macgb.flds)+len(macgb.fns))
		for _, f := range *macgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*macgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := macgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MasterAccountCategorySelect is the builder for selecting fields of MasterAccountCategory entities.
type MasterAccountCategorySelect struct {
	*MasterAccountCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (macs *MasterAccountCategorySelect) Aggregate(fns ...AggregateFunc) *MasterAccountCategorySelect {
	macs.fns = append(macs.fns, fns...)
	return macs
}

// Scan applies the selector query and scans the result into the given value.
func (macs *MasterAccountCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, macs.ctx, "Select")
	if err := macs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MasterAccountCategoryQuery, *MasterAccountCategorySelect](ctx, macs.MasterAccountCategoryQuery, macs, macs.inters, v)
}

func (macs *MasterAccountCategorySelect) sqlScan(ctx context.Context, root *MasterAccountCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(macs.fns))
	for _, fn := range macs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*macs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := macs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
