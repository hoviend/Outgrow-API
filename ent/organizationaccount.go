// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"outgrow/ent/organizationaccount"
	"outgrow/ent/organizationaccountcategory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrganizationAccount is the model entity for the OrganizationAccount schema.
type OrganizationAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationAccountQuery when eager-loading is set.
	Edges        OrganizationAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationAccountEdges holds the relations/edges for other nodes in the graph.
type OrganizationAccountEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// AccCategory holds the value of the accCategory edge.
	AccCategory *OrganizationAccountCategory `json:"accCategory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationAccountEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// AccCategoryOrErr returns the AccCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationAccountEdges) AccCategoryOrErr() (*OrganizationAccountCategory, error) {
	if e.loadedTypes[1] {
		if e.AccCategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organizationaccountcategory.Label}
		}
		return e.AccCategory, nil
	}
	return nil, &NotLoadedError{edge: "accCategory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationaccount.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case organizationaccount.FieldID, organizationaccount.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case organizationaccount.FieldName, organizationaccount.FieldCode:
			values[i] = new(sql.NullString)
		case organizationaccount.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationAccount fields.
func (oa *OrganizationAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case organizationaccount.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				oa.CategoryID = int(value.Int64)
			}
		case organizationaccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oa.Name = value.String
			}
		case organizationaccount.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				oa.Code = value.String
			}
		case organizationaccount.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				oa.Balance = value.Float64
			}
		case organizationaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationAccount.
// This includes values selected through modifiers, order, etc.
func (oa *OrganizationAccount) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// QueryTransactions queries the "transactions" edge of the OrganizationAccount entity.
func (oa *OrganizationAccount) QueryTransactions() *TransactionQuery {
	return NewOrganizationAccountClient(oa.config).QueryTransactions(oa)
}

// QueryAccCategory queries the "accCategory" edge of the OrganizationAccount entity.
func (oa *OrganizationAccount) QueryAccCategory() *OrganizationAccountCategoryQuery {
	return NewOrganizationAccountClient(oa.config).QueryAccCategory(oa)
}

// Update returns a builder for updating this OrganizationAccount.
// Note that you need to call OrganizationAccount.Unwrap() before calling this method if this OrganizationAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrganizationAccount) Update() *OrganizationAccountUpdateOne {
	return NewOrganizationAccountClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrganizationAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrganizationAccount) Unwrap() *OrganizationAccount {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationAccount is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrganizationAccount) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oa.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(oa.Code)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", oa.Balance))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationAccounts is a parsable slice of OrganizationAccount.
type OrganizationAccounts []*OrganizationAccount
