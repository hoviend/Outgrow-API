// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/organizationaccount"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationAccountDelete is the builder for deleting a OrganizationAccount entity.
type OrganizationAccountDelete struct {
	config
	hooks    []Hook
	mutation *OrganizationAccountMutation
}

// Where appends a list predicates to the OrganizationAccountDelete builder.
func (oad *OrganizationAccountDelete) Where(ps ...predicate.OrganizationAccount) *OrganizationAccountDelete {
	oad.mutation.Where(ps...)
	return oad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oad *OrganizationAccountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationAccountMutation](ctx, oad.sqlExec, oad.mutation, oad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oad *OrganizationAccountDelete) ExecX(ctx context.Context) int {
	n, err := oad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oad *OrganizationAccountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(organizationaccount.Table, sqlgraph.NewFieldSpec(organizationaccount.FieldID, field.TypeInt))
	if ps := oad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oad.mutation.done = true
	return affected, err
}

// OrganizationAccountDeleteOne is the builder for deleting a single OrganizationAccount entity.
type OrganizationAccountDeleteOne struct {
	oad *OrganizationAccountDelete
}

// Where appends a list predicates to the OrganizationAccountDelete builder.
func (oado *OrganizationAccountDeleteOne) Where(ps ...predicate.OrganizationAccount) *OrganizationAccountDeleteOne {
	oado.oad.mutation.Where(ps...)
	return oado
}

// Exec executes the deletion query.
func (oado *OrganizationAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := oado.oad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{organizationaccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oado *OrganizationAccountDeleteOne) ExecX(ctx context.Context) {
	if err := oado.Exec(ctx); err != nil {
		panic(err)
	}
}
