// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountTypeUpdate is the builder for updating MasterAccountType entities.
type MasterAccountTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MasterAccountTypeMutation
}

// Where appends a list predicates to the MasterAccountTypeUpdate builder.
func (matu *MasterAccountTypeUpdate) Where(ps ...predicate.MasterAccountType) *MasterAccountTypeUpdate {
	matu.mutation.Where(ps...)
	return matu
}

// SetName sets the "name" field.
func (matu *MasterAccountTypeUpdate) SetName(s string) *MasterAccountTypeUpdate {
	matu.mutation.SetName(s)
	return matu
}

// AddCategoryIDs adds the "categories" edge to the MasterAccountCategory entity by IDs.
func (matu *MasterAccountTypeUpdate) AddCategoryIDs(ids ...int) *MasterAccountTypeUpdate {
	matu.mutation.AddCategoryIDs(ids...)
	return matu
}

// AddCategories adds the "categories" edges to the MasterAccountCategory entity.
func (matu *MasterAccountTypeUpdate) AddCategories(m ...*MasterAccountCategory) *MasterAccountTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return matu.AddCategoryIDs(ids...)
}

// Mutation returns the MasterAccountTypeMutation object of the builder.
func (matu *MasterAccountTypeUpdate) Mutation() *MasterAccountTypeMutation {
	return matu.mutation
}

// ClearCategories clears all "categories" edges to the MasterAccountCategory entity.
func (matu *MasterAccountTypeUpdate) ClearCategories() *MasterAccountTypeUpdate {
	matu.mutation.ClearCategories()
	return matu
}

// RemoveCategoryIDs removes the "categories" edge to MasterAccountCategory entities by IDs.
func (matu *MasterAccountTypeUpdate) RemoveCategoryIDs(ids ...int) *MasterAccountTypeUpdate {
	matu.mutation.RemoveCategoryIDs(ids...)
	return matu
}

// RemoveCategories removes "categories" edges to MasterAccountCategory entities.
func (matu *MasterAccountTypeUpdate) RemoveCategories(m ...*MasterAccountCategory) *MasterAccountTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return matu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (matu *MasterAccountTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MasterAccountTypeMutation](ctx, matu.sqlSave, matu.mutation, matu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (matu *MasterAccountTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := matu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (matu *MasterAccountTypeUpdate) Exec(ctx context.Context) error {
	_, err := matu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (matu *MasterAccountTypeUpdate) ExecX(ctx context.Context) {
	if err := matu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (matu *MasterAccountTypeUpdate) check() error {
	if v, ok := matu.mutation.Name(); ok {
		if err := masteraccounttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccountType.name": %w`, err)}
		}
	}
	return nil
}

func (matu *MasterAccountTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := matu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccounttype.Table, masteraccounttype.Columns, sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt))
	if ps := matu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := matu.mutation.Name(); ok {
		_spec.SetField(masteraccounttype.FieldName, field.TypeString, value)
	}
	if matu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := matu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !matu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := matu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, matu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccounttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	matu.mutation.done = true
	return n, nil
}

// MasterAccountTypeUpdateOne is the builder for updating a single MasterAccountType entity.
type MasterAccountTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MasterAccountTypeMutation
}

// SetName sets the "name" field.
func (matuo *MasterAccountTypeUpdateOne) SetName(s string) *MasterAccountTypeUpdateOne {
	matuo.mutation.SetName(s)
	return matuo
}

// AddCategoryIDs adds the "categories" edge to the MasterAccountCategory entity by IDs.
func (matuo *MasterAccountTypeUpdateOne) AddCategoryIDs(ids ...int) *MasterAccountTypeUpdateOne {
	matuo.mutation.AddCategoryIDs(ids...)
	return matuo
}

// AddCategories adds the "categories" edges to the MasterAccountCategory entity.
func (matuo *MasterAccountTypeUpdateOne) AddCategories(m ...*MasterAccountCategory) *MasterAccountTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return matuo.AddCategoryIDs(ids...)
}

// Mutation returns the MasterAccountTypeMutation object of the builder.
func (matuo *MasterAccountTypeUpdateOne) Mutation() *MasterAccountTypeMutation {
	return matuo.mutation
}

// ClearCategories clears all "categories" edges to the MasterAccountCategory entity.
func (matuo *MasterAccountTypeUpdateOne) ClearCategories() *MasterAccountTypeUpdateOne {
	matuo.mutation.ClearCategories()
	return matuo
}

// RemoveCategoryIDs removes the "categories" edge to MasterAccountCategory entities by IDs.
func (matuo *MasterAccountTypeUpdateOne) RemoveCategoryIDs(ids ...int) *MasterAccountTypeUpdateOne {
	matuo.mutation.RemoveCategoryIDs(ids...)
	return matuo
}

// RemoveCategories removes "categories" edges to MasterAccountCategory entities.
func (matuo *MasterAccountTypeUpdateOne) RemoveCategories(m ...*MasterAccountCategory) *MasterAccountTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return matuo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the MasterAccountTypeUpdate builder.
func (matuo *MasterAccountTypeUpdateOne) Where(ps ...predicate.MasterAccountType) *MasterAccountTypeUpdateOne {
	matuo.mutation.Where(ps...)
	return matuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (matuo *MasterAccountTypeUpdateOne) Select(field string, fields ...string) *MasterAccountTypeUpdateOne {
	matuo.fields = append([]string{field}, fields...)
	return matuo
}

// Save executes the query and returns the updated MasterAccountType entity.
func (matuo *MasterAccountTypeUpdateOne) Save(ctx context.Context) (*MasterAccountType, error) {
	return withHooks[*MasterAccountType, MasterAccountTypeMutation](ctx, matuo.sqlSave, matuo.mutation, matuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (matuo *MasterAccountTypeUpdateOne) SaveX(ctx context.Context) *MasterAccountType {
	node, err := matuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (matuo *MasterAccountTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := matuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (matuo *MasterAccountTypeUpdateOne) ExecX(ctx context.Context) {
	if err := matuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (matuo *MasterAccountTypeUpdateOne) check() error {
	if v, ok := matuo.mutation.Name(); ok {
		if err := masteraccounttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccountType.name": %w`, err)}
		}
	}
	return nil
}

func (matuo *MasterAccountTypeUpdateOne) sqlSave(ctx context.Context) (_node *MasterAccountType, err error) {
	if err := matuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(masteraccounttype.Table, masteraccounttype.Columns, sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt))
	id, ok := matuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MasterAccountType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := matuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, masteraccounttype.FieldID)
		for _, f := range fields {
			if !masteraccounttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != masteraccounttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := matuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := matuo.mutation.Name(); ok {
		_spec.SetField(masteraccounttype.FieldName, field.TypeString, value)
	}
	if matuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := matuo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !matuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := matuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccounttype.CategoriesTable,
			Columns: []string{masteraccounttype.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MasterAccountType{config: matuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, matuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masteraccounttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	matuo.mutation.done = true
	return _node, nil
}
