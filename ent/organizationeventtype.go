// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"outgrow/ent/organization"
	"outgrow/ent/organizationeventtype"
	"outgrow/ent/schema"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OrganizationEventType is the model entity for the OrganizationEventType schema.
type OrganizationEventType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Rules holds the value of the "rules" field.
	Rules []schema.EventRules `json:"rules,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationEventTypeQuery when eager-loading is set.
	Edges OrganizationEventTypeEdges `json:"edges"`
}

// OrganizationEventTypeEdges holds the relations/edges for other nodes in the graph.
type OrganizationEventTypeEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEventTypeEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEventTypeEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[1] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationEventType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationeventtype.FieldRules:
			values[i] = new([]byte)
		case organizationeventtype.FieldID:
			values[i] = new(sql.NullInt64)
		case organizationeventtype.FieldName, organizationeventtype.FieldDescription:
			values[i] = new(sql.NullString)
		case organizationeventtype.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case organizationeventtype.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationEventType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationEventType fields.
func (oet *OrganizationEventType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationeventtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oet.ID = int(value.Int64)
		case organizationeventtype.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				oet.OrganizationID = *value
			}
		case organizationeventtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oet.Name = value.String
			}
		case organizationeventtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oet.Description = value.String
			}
		case organizationeventtype.FieldRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oet.Rules); err != nil {
					return fmt.Errorf("unmarshal field rules: %w", err)
				}
			}
		case organizationeventtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oet.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the OrganizationEventType entity.
func (oet *OrganizationEventType) QueryEvents() *EventQuery {
	return NewOrganizationEventTypeClient(oet.config).QueryEvents(oet)
}

// QueryOrganization queries the "organization" edge of the OrganizationEventType entity.
func (oet *OrganizationEventType) QueryOrganization() *OrganizationQuery {
	return NewOrganizationEventTypeClient(oet.config).QueryOrganization(oet)
}

// Update returns a builder for updating this OrganizationEventType.
// Note that you need to call OrganizationEventType.Unwrap() before calling this method if this OrganizationEventType
// was returned from a transaction, and the transaction was committed or rolled back.
func (oet *OrganizationEventType) Update() *OrganizationEventTypeUpdateOne {
	return NewOrganizationEventTypeClient(oet.config).UpdateOne(oet)
}

// Unwrap unwraps the OrganizationEventType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oet *OrganizationEventType) Unwrap() *OrganizationEventType {
	_tx, ok := oet.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationEventType is not a transactional entity")
	}
	oet.config.driver = _tx.drv
	return oet
}

// String implements the fmt.Stringer.
func (oet *OrganizationEventType) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationEventType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oet.ID))
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", oet.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oet.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(oet.Description)
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(fmt.Sprintf("%v", oet.Rules))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oet.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationEventTypes is a parsable slice of OrganizationEventType.
type OrganizationEventTypes []*OrganizationEventType
