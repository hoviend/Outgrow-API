// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"outgrow/ent/masteraccounttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MasterAccountType is the model entity for the MasterAccountType schema.
type MasterAccountType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MasterAccountTypeQuery when eager-loading is set.
	Edges MasterAccountTypeEdges `json:"edges"`
}

// MasterAccountTypeEdges holds the relations/edges for other nodes in the graph.
type MasterAccountTypeEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*MasterAccountCategory `json:"categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e MasterAccountTypeEdges) CategoriesOrErr() ([]*MasterAccountCategory, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MasterAccountType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case masteraccounttype.FieldID:
			values[i] = new(sql.NullInt64)
		case masteraccounttype.FieldName:
			values[i] = new(sql.NullString)
		case masteraccounttype.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MasterAccountType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MasterAccountType fields.
func (mat *MasterAccountType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case masteraccounttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mat.ID = int(value.Int64)
		case masteraccounttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mat.Name = value.String
			}
		case masteraccounttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mat.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCategories queries the "categories" edge of the MasterAccountType entity.
func (mat *MasterAccountType) QueryCategories() *MasterAccountCategoryQuery {
	return NewMasterAccountTypeClient(mat.config).QueryCategories(mat)
}

// Update returns a builder for updating this MasterAccountType.
// Note that you need to call MasterAccountType.Unwrap() before calling this method if this MasterAccountType
// was returned from a transaction, and the transaction was committed or rolled back.
func (mat *MasterAccountType) Update() *MasterAccountTypeUpdateOne {
	return NewMasterAccountTypeClient(mat.config).UpdateOne(mat)
}

// Unwrap unwraps the MasterAccountType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mat *MasterAccountType) Unwrap() *MasterAccountType {
	_tx, ok := mat.config.driver.(*txDriver)
	if !ok {
		panic("ent: MasterAccountType is not a transactional entity")
	}
	mat.config.driver = _tx.drv
	return mat
}

// String implements the fmt.Stringer.
func (mat *MasterAccountType) String() string {
	var builder strings.Builder
	builder.WriteString("MasterAccountType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mat.ID))
	builder.WriteString("name=")
	builder.WriteString(mat.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mat.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MasterAccountTypes is a parsable slice of MasterAccountType.
type MasterAccountTypes []*MasterAccountType
