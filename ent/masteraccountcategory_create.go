// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/masteraccount"
	"outgrow/ent/masteraccountcategory"
	"outgrow/ent/masteraccounttype"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterAccountCategoryCreate is the builder for creating a MasterAccountCategory entity.
type MasterAccountCategoryCreate struct {
	config
	mutation *MasterAccountCategoryMutation
	hooks    []Hook
}

// SetAccountTypeID sets the "account_type_id" field.
func (macc *MasterAccountCategoryCreate) SetAccountTypeID(i int) *MasterAccountCategoryCreate {
	macc.mutation.SetAccountTypeID(i)
	return macc
}

// SetName sets the "name" field.
func (macc *MasterAccountCategoryCreate) SetName(s string) *MasterAccountCategoryCreate {
	macc.mutation.SetName(s)
	return macc
}

// SetDescription sets the "description" field.
func (macc *MasterAccountCategoryCreate) SetDescription(s string) *MasterAccountCategoryCreate {
	macc.mutation.SetDescription(s)
	return macc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (macc *MasterAccountCategoryCreate) SetNillableDescription(s *string) *MasterAccountCategoryCreate {
	if s != nil {
		macc.SetDescription(*s)
	}
	return macc
}

// SetCreatedAt sets the "created_at" field.
func (macc *MasterAccountCategoryCreate) SetCreatedAt(t time.Time) *MasterAccountCategoryCreate {
	macc.mutation.SetCreatedAt(t)
	return macc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (macc *MasterAccountCategoryCreate) SetNillableCreatedAt(t *time.Time) *MasterAccountCategoryCreate {
	if t != nil {
		macc.SetCreatedAt(*t)
	}
	return macc
}

// AddAccountIDs adds the "accounts" edge to the MasterAccount entity by IDs.
func (macc *MasterAccountCategoryCreate) AddAccountIDs(ids ...int) *MasterAccountCategoryCreate {
	macc.mutation.AddAccountIDs(ids...)
	return macc
}

// AddAccounts adds the "accounts" edges to the MasterAccount entity.
func (macc *MasterAccountCategoryCreate) AddAccounts(m ...*MasterAccount) *MasterAccountCategoryCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return macc.AddAccountIDs(ids...)
}

// SetAccTypeID sets the "accType" edge to the MasterAccountType entity by ID.
func (macc *MasterAccountCategoryCreate) SetAccTypeID(id int) *MasterAccountCategoryCreate {
	macc.mutation.SetAccTypeID(id)
	return macc
}

// SetAccType sets the "accType" edge to the MasterAccountType entity.
func (macc *MasterAccountCategoryCreate) SetAccType(m *MasterAccountType) *MasterAccountCategoryCreate {
	return macc.SetAccTypeID(m.ID)
}

// Mutation returns the MasterAccountCategoryMutation object of the builder.
func (macc *MasterAccountCategoryCreate) Mutation() *MasterAccountCategoryMutation {
	return macc.mutation
}

// Save creates the MasterAccountCategory in the database.
func (macc *MasterAccountCategoryCreate) Save(ctx context.Context) (*MasterAccountCategory, error) {
	macc.defaults()
	return withHooks[*MasterAccountCategory, MasterAccountCategoryMutation](ctx, macc.sqlSave, macc.mutation, macc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (macc *MasterAccountCategoryCreate) SaveX(ctx context.Context) *MasterAccountCategory {
	v, err := macc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macc *MasterAccountCategoryCreate) Exec(ctx context.Context) error {
	_, err := macc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macc *MasterAccountCategoryCreate) ExecX(ctx context.Context) {
	if err := macc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (macc *MasterAccountCategoryCreate) defaults() {
	if _, ok := macc.mutation.CreatedAt(); !ok {
		v := masteraccountcategory.DefaultCreatedAt()
		macc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macc *MasterAccountCategoryCreate) check() error {
	if _, ok := macc.mutation.AccountTypeID(); !ok {
		return &ValidationError{Name: "account_type_id", err: errors.New(`ent: missing required field "MasterAccountCategory.account_type_id"`)}
	}
	if _, ok := macc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MasterAccountCategory.name"`)}
	}
	if v, ok := macc.mutation.Name(); ok {
		if err := masteraccountcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterAccountCategory.name": %w`, err)}
		}
	}
	if _, ok := macc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MasterAccountCategory.created_at"`)}
	}
	if _, ok := macc.mutation.AccTypeID(); !ok {
		return &ValidationError{Name: "accType", err: errors.New(`ent: missing required edge "MasterAccountCategory.accType"`)}
	}
	return nil
}

func (macc *MasterAccountCategoryCreate) sqlSave(ctx context.Context) (*MasterAccountCategory, error) {
	if err := macc.check(); err != nil {
		return nil, err
	}
	_node, _spec := macc.createSpec()
	if err := sqlgraph.CreateNode(ctx, macc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	macc.mutation.id = &_node.ID
	macc.mutation.done = true
	return _node, nil
}

func (macc *MasterAccountCategoryCreate) createSpec() (*MasterAccountCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &MasterAccountCategory{config: macc.config}
		_spec = sqlgraph.NewCreateSpec(masteraccountcategory.Table, sqlgraph.NewFieldSpec(masteraccountcategory.FieldID, field.TypeInt))
	)
	if value, ok := macc.mutation.Name(); ok {
		_spec.SetField(masteraccountcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := macc.mutation.Description(); ok {
		_spec.SetField(masteraccountcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := macc.mutation.CreatedAt(); ok {
		_spec.SetField(masteraccountcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := macc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   masteraccountcategory.AccountsTable,
			Columns: []string{masteraccountcategory.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := macc.mutation.AccTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masteraccountcategory.AccTypeTable,
			Columns: []string{masteraccountcategory.AccTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(masteraccounttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MasterAccountCategoryCreateBulk is the builder for creating many MasterAccountCategory entities in bulk.
type MasterAccountCategoryCreateBulk struct {
	config
	builders []*MasterAccountCategoryCreate
}

// Save creates the MasterAccountCategory entities in the database.
func (maccb *MasterAccountCategoryCreateBulk) Save(ctx context.Context) ([]*MasterAccountCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(maccb.builders))
	nodes := make([]*MasterAccountCategory, len(maccb.builders))
	mutators := make([]Mutator, len(maccb.builders))
	for i := range maccb.builders {
		func(i int, root context.Context) {
			builder := maccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MasterAccountCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, maccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, maccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, maccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (maccb *MasterAccountCategoryCreateBulk) SaveX(ctx context.Context) []*MasterAccountCategory {
	v, err := maccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (maccb *MasterAccountCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := maccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (maccb *MasterAccountCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := maccb.Exec(ctx); err != nil {
		panic(err)
	}
}
