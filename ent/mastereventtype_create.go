// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/mastereventtype"
	"outgrow/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MasterEventTypeCreate is the builder for creating a MasterEventType entity.
type MasterEventTypeCreate struct {
	config
	mutation *MasterEventTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (metc *MasterEventTypeCreate) SetName(s string) *MasterEventTypeCreate {
	metc.mutation.SetName(s)
	return metc
}

// SetDescription sets the "description" field.
func (metc *MasterEventTypeCreate) SetDescription(s string) *MasterEventTypeCreate {
	metc.mutation.SetDescription(s)
	return metc
}

// SetRules sets the "rules" field.
func (metc *MasterEventTypeCreate) SetRules(sr []schema.EventRules) *MasterEventTypeCreate {
	metc.mutation.SetRules(sr)
	return metc
}

// SetCreatedAt sets the "created_at" field.
func (metc *MasterEventTypeCreate) SetCreatedAt(t time.Time) *MasterEventTypeCreate {
	metc.mutation.SetCreatedAt(t)
	return metc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (metc *MasterEventTypeCreate) SetNillableCreatedAt(t *time.Time) *MasterEventTypeCreate {
	if t != nil {
		metc.SetCreatedAt(*t)
	}
	return metc
}

// Mutation returns the MasterEventTypeMutation object of the builder.
func (metc *MasterEventTypeCreate) Mutation() *MasterEventTypeMutation {
	return metc.mutation
}

// Save creates the MasterEventType in the database.
func (metc *MasterEventTypeCreate) Save(ctx context.Context) (*MasterEventType, error) {
	metc.defaults()
	return withHooks[*MasterEventType, MasterEventTypeMutation](ctx, metc.sqlSave, metc.mutation, metc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (metc *MasterEventTypeCreate) SaveX(ctx context.Context) *MasterEventType {
	v, err := metc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (metc *MasterEventTypeCreate) Exec(ctx context.Context) error {
	_, err := metc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (metc *MasterEventTypeCreate) ExecX(ctx context.Context) {
	if err := metc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (metc *MasterEventTypeCreate) defaults() {
	if _, ok := metc.mutation.CreatedAt(); !ok {
		v := mastereventtype.DefaultCreatedAt()
		metc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (metc *MasterEventTypeCreate) check() error {
	if _, ok := metc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MasterEventType.name"`)}
	}
	if v, ok := metc.mutation.Name(); ok {
		if err := mastereventtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MasterEventType.name": %w`, err)}
		}
	}
	if _, ok := metc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "MasterEventType.description"`)}
	}
	if _, ok := metc.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "MasterEventType.rules"`)}
	}
	if _, ok := metc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MasterEventType.created_at"`)}
	}
	return nil
}

func (metc *MasterEventTypeCreate) sqlSave(ctx context.Context) (*MasterEventType, error) {
	if err := metc.check(); err != nil {
		return nil, err
	}
	_node, _spec := metc.createSpec()
	if err := sqlgraph.CreateNode(ctx, metc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	metc.mutation.id = &_node.ID
	metc.mutation.done = true
	return _node, nil
}

func (metc *MasterEventTypeCreate) createSpec() (*MasterEventType, *sqlgraph.CreateSpec) {
	var (
		_node = &MasterEventType{config: metc.config}
		_spec = sqlgraph.NewCreateSpec(mastereventtype.Table, sqlgraph.NewFieldSpec(mastereventtype.FieldID, field.TypeInt))
	)
	if value, ok := metc.mutation.Name(); ok {
		_spec.SetField(mastereventtype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := metc.mutation.Description(); ok {
		_spec.SetField(mastereventtype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := metc.mutation.Rules(); ok {
		_spec.SetField(mastereventtype.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if value, ok := metc.mutation.CreatedAt(); ok {
		_spec.SetField(mastereventtype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// MasterEventTypeCreateBulk is the builder for creating many MasterEventType entities in bulk.
type MasterEventTypeCreateBulk struct {
	config
	builders []*MasterEventTypeCreate
}

// Save creates the MasterEventType entities in the database.
func (metcb *MasterEventTypeCreateBulk) Save(ctx context.Context) ([]*MasterEventType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(metcb.builders))
	nodes := make([]*MasterEventType, len(metcb.builders))
	mutators := make([]Mutator, len(metcb.builders))
	for i := range metcb.builders {
		func(i int, root context.Context) {
			builder := metcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MasterEventTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, metcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, metcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, metcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (metcb *MasterEventTypeCreateBulk) SaveX(ctx context.Context) []*MasterEventType {
	v, err := metcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (metcb *MasterEventTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := metcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (metcb *MasterEventTypeCreateBulk) ExecX(ctx context.Context) {
	if err := metcb.Exec(ctx); err != nil {
		panic(err)
	}
}
