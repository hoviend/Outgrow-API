// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"outgrow/ent/organizationeventtype"
	"outgrow/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationEventTypeDelete is the builder for deleting a OrganizationEventType entity.
type OrganizationEventTypeDelete struct {
	config
	hooks    []Hook
	mutation *OrganizationEventTypeMutation
}

// Where appends a list predicates to the OrganizationEventTypeDelete builder.
func (oetd *OrganizationEventTypeDelete) Where(ps ...predicate.OrganizationEventType) *OrganizationEventTypeDelete {
	oetd.mutation.Where(ps...)
	return oetd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oetd *OrganizationEventTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationEventTypeMutation](ctx, oetd.sqlExec, oetd.mutation, oetd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oetd *OrganizationEventTypeDelete) ExecX(ctx context.Context) int {
	n, err := oetd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oetd *OrganizationEventTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(organizationeventtype.Table, sqlgraph.NewFieldSpec(organizationeventtype.FieldID, field.TypeInt))
	if ps := oetd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oetd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oetd.mutation.done = true
	return affected, err
}

// OrganizationEventTypeDeleteOne is the builder for deleting a single OrganizationEventType entity.
type OrganizationEventTypeDeleteOne struct {
	oetd *OrganizationEventTypeDelete
}

// Where appends a list predicates to the OrganizationEventTypeDelete builder.
func (oetdo *OrganizationEventTypeDeleteOne) Where(ps ...predicate.OrganizationEventType) *OrganizationEventTypeDeleteOne {
	oetdo.oetd.mutation.Where(ps...)
	return oetdo
}

// Exec executes the deletion query.
func (oetdo *OrganizationEventTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := oetdo.oetd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{organizationeventtype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oetdo *OrganizationEventTypeDeleteOne) ExecX(ctx context.Context) {
	if err := oetdo.Exec(ctx); err != nil {
		panic(err)
	}
}
