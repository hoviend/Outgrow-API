// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"outgrow/ent/organizationaccount"
	"outgrow/ent/organizationaccountcategory"
	"outgrow/ent/predicate"
	"outgrow/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrganizationAccountUpdate is the builder for updating OrganizationAccount entities.
type OrganizationAccountUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationAccountMutation
}

// Where appends a list predicates to the OrganizationAccountUpdate builder.
func (oau *OrganizationAccountUpdate) Where(ps ...predicate.OrganizationAccount) *OrganizationAccountUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetCategoryID sets the "category_id" field.
func (oau *OrganizationAccountUpdate) SetCategoryID(i int) *OrganizationAccountUpdate {
	oau.mutation.SetCategoryID(i)
	return oau
}

// SetName sets the "name" field.
func (oau *OrganizationAccountUpdate) SetName(s string) *OrganizationAccountUpdate {
	oau.mutation.SetName(s)
	return oau
}

// SetCode sets the "code" field.
func (oau *OrganizationAccountUpdate) SetCode(s string) *OrganizationAccountUpdate {
	oau.mutation.SetCode(s)
	return oau
}

// SetBalance sets the "balance" field.
func (oau *OrganizationAccountUpdate) SetBalance(f float64) *OrganizationAccountUpdate {
	oau.mutation.ResetBalance()
	oau.mutation.SetBalance(f)
	return oau
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (oau *OrganizationAccountUpdate) SetNillableBalance(f *float64) *OrganizationAccountUpdate {
	if f != nil {
		oau.SetBalance(*f)
	}
	return oau
}

// AddBalance adds f to the "balance" field.
func (oau *OrganizationAccountUpdate) AddBalance(f float64) *OrganizationAccountUpdate {
	oau.mutation.AddBalance(f)
	return oau
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (oau *OrganizationAccountUpdate) AddTransactionIDs(ids ...uuid.UUID) *OrganizationAccountUpdate {
	oau.mutation.AddTransactionIDs(ids...)
	return oau
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (oau *OrganizationAccountUpdate) AddTransactions(t ...*Transaction) *OrganizationAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oau.AddTransactionIDs(ids...)
}

// SetAccCategoryID sets the "accCategory" edge to the OrganizationAccountCategory entity by ID.
func (oau *OrganizationAccountUpdate) SetAccCategoryID(id int) *OrganizationAccountUpdate {
	oau.mutation.SetAccCategoryID(id)
	return oau
}

// SetAccCategory sets the "accCategory" edge to the OrganizationAccountCategory entity.
func (oau *OrganizationAccountUpdate) SetAccCategory(o *OrganizationAccountCategory) *OrganizationAccountUpdate {
	return oau.SetAccCategoryID(o.ID)
}

// Mutation returns the OrganizationAccountMutation object of the builder.
func (oau *OrganizationAccountUpdate) Mutation() *OrganizationAccountMutation {
	return oau.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (oau *OrganizationAccountUpdate) ClearTransactions() *OrganizationAccountUpdate {
	oau.mutation.ClearTransactions()
	return oau
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (oau *OrganizationAccountUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *OrganizationAccountUpdate {
	oau.mutation.RemoveTransactionIDs(ids...)
	return oau
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (oau *OrganizationAccountUpdate) RemoveTransactions(t ...*Transaction) *OrganizationAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oau.RemoveTransactionIDs(ids...)
}

// ClearAccCategory clears the "accCategory" edge to the OrganizationAccountCategory entity.
func (oau *OrganizationAccountUpdate) ClearAccCategory() *OrganizationAccountUpdate {
	oau.mutation.ClearAccCategory()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrganizationAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationAccountMutation](ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrganizationAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrganizationAccountUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrganizationAccountUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrganizationAccountUpdate) check() error {
	if v, ok := oau.mutation.CategoryID(); ok {
		if err := organizationaccount.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.category_id": %w`, err)}
		}
	}
	if v, ok := oau.mutation.Name(); ok {
		if err := organizationaccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.name": %w`, err)}
		}
	}
	if v, ok := oau.mutation.Code(); ok {
		if err := organizationaccount.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.code": %w`, err)}
		}
	}
	if _, ok := oau.mutation.AccCategoryID(); oau.mutation.AccCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationAccount.accCategory"`)
	}
	return nil
}

func (oau *OrganizationAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationaccount.Table, organizationaccount.Columns, sqlgraph.NewFieldSpec(organizationaccount.FieldID, field.TypeInt))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.Name(); ok {
		_spec.SetField(organizationaccount.FieldName, field.TypeString, value)
	}
	if value, ok := oau.mutation.Code(); ok {
		_spec.SetField(organizationaccount.FieldCode, field.TypeString, value)
	}
	if value, ok := oau.mutation.Balance(); ok {
		_spec.SetField(organizationaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := oau.mutation.AddedBalance(); ok {
		_spec.AddField(organizationaccount.FieldBalance, field.TypeFloat64, value)
	}
	if oau.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !oau.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.AccCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccount.AccCategoryTable,
			Columns: []string{organizationaccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.AccCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccount.AccCategoryTable,
			Columns: []string{organizationaccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OrganizationAccountUpdateOne is the builder for updating a single OrganizationAccount entity.
type OrganizationAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationAccountMutation
}

// SetCategoryID sets the "category_id" field.
func (oauo *OrganizationAccountUpdateOne) SetCategoryID(i int) *OrganizationAccountUpdateOne {
	oauo.mutation.SetCategoryID(i)
	return oauo
}

// SetName sets the "name" field.
func (oauo *OrganizationAccountUpdateOne) SetName(s string) *OrganizationAccountUpdateOne {
	oauo.mutation.SetName(s)
	return oauo
}

// SetCode sets the "code" field.
func (oauo *OrganizationAccountUpdateOne) SetCode(s string) *OrganizationAccountUpdateOne {
	oauo.mutation.SetCode(s)
	return oauo
}

// SetBalance sets the "balance" field.
func (oauo *OrganizationAccountUpdateOne) SetBalance(f float64) *OrganizationAccountUpdateOne {
	oauo.mutation.ResetBalance()
	oauo.mutation.SetBalance(f)
	return oauo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (oauo *OrganizationAccountUpdateOne) SetNillableBalance(f *float64) *OrganizationAccountUpdateOne {
	if f != nil {
		oauo.SetBalance(*f)
	}
	return oauo
}

// AddBalance adds f to the "balance" field.
func (oauo *OrganizationAccountUpdateOne) AddBalance(f float64) *OrganizationAccountUpdateOne {
	oauo.mutation.AddBalance(f)
	return oauo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (oauo *OrganizationAccountUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *OrganizationAccountUpdateOne {
	oauo.mutation.AddTransactionIDs(ids...)
	return oauo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (oauo *OrganizationAccountUpdateOne) AddTransactions(t ...*Transaction) *OrganizationAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oauo.AddTransactionIDs(ids...)
}

// SetAccCategoryID sets the "accCategory" edge to the OrganizationAccountCategory entity by ID.
func (oauo *OrganizationAccountUpdateOne) SetAccCategoryID(id int) *OrganizationAccountUpdateOne {
	oauo.mutation.SetAccCategoryID(id)
	return oauo
}

// SetAccCategory sets the "accCategory" edge to the OrganizationAccountCategory entity.
func (oauo *OrganizationAccountUpdateOne) SetAccCategory(o *OrganizationAccountCategory) *OrganizationAccountUpdateOne {
	return oauo.SetAccCategoryID(o.ID)
}

// Mutation returns the OrganizationAccountMutation object of the builder.
func (oauo *OrganizationAccountUpdateOne) Mutation() *OrganizationAccountMutation {
	return oauo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (oauo *OrganizationAccountUpdateOne) ClearTransactions() *OrganizationAccountUpdateOne {
	oauo.mutation.ClearTransactions()
	return oauo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (oauo *OrganizationAccountUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *OrganizationAccountUpdateOne {
	oauo.mutation.RemoveTransactionIDs(ids...)
	return oauo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (oauo *OrganizationAccountUpdateOne) RemoveTransactions(t ...*Transaction) *OrganizationAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oauo.RemoveTransactionIDs(ids...)
}

// ClearAccCategory clears the "accCategory" edge to the OrganizationAccountCategory entity.
func (oauo *OrganizationAccountUpdateOne) ClearAccCategory() *OrganizationAccountUpdateOne {
	oauo.mutation.ClearAccCategory()
	return oauo
}

// Where appends a list predicates to the OrganizationAccountUpdate builder.
func (oauo *OrganizationAccountUpdateOne) Where(ps ...predicate.OrganizationAccount) *OrganizationAccountUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrganizationAccountUpdateOne) Select(field string, fields ...string) *OrganizationAccountUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrganizationAccount entity.
func (oauo *OrganizationAccountUpdateOne) Save(ctx context.Context) (*OrganizationAccount, error) {
	return withHooks[*OrganizationAccount, OrganizationAccountMutation](ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrganizationAccountUpdateOne) SaveX(ctx context.Context) *OrganizationAccount {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrganizationAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrganizationAccountUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrganizationAccountUpdateOne) check() error {
	if v, ok := oauo.mutation.CategoryID(); ok {
		if err := organizationaccount.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.category_id": %w`, err)}
		}
	}
	if v, ok := oauo.mutation.Name(); ok {
		if err := organizationaccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.name": %w`, err)}
		}
	}
	if v, ok := oauo.mutation.Code(); ok {
		if err := organizationaccount.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OrganizationAccount.code": %w`, err)}
		}
	}
	if _, ok := oauo.mutation.AccCategoryID(); oauo.mutation.AccCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationAccount.accCategory"`)
	}
	return nil
}

func (oauo *OrganizationAccountUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationAccount, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationaccount.Table, organizationaccount.Columns, sqlgraph.NewFieldSpec(organizationaccount.FieldID, field.TypeInt))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationaccount.FieldID)
		for _, f := range fields {
			if !organizationaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.Name(); ok {
		_spec.SetField(organizationaccount.FieldName, field.TypeString, value)
	}
	if value, ok := oauo.mutation.Code(); ok {
		_spec.SetField(organizationaccount.FieldCode, field.TypeString, value)
	}
	if value, ok := oauo.mutation.Balance(); ok {
		_spec.SetField(organizationaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := oauo.mutation.AddedBalance(); ok {
		_spec.AddField(organizationaccount.FieldBalance, field.TypeFloat64, value)
	}
	if oauo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !oauo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationaccount.TransactionsTable,
			Columns: []string{organizationaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.AccCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccount.AccCategoryTable,
			Columns: []string{organizationaccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.AccCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationaccount.AccCategoryTable,
			Columns: []string{organizationaccount.AccCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationaccountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationAccount{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
